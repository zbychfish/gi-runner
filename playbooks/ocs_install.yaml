- name: Configure OCS/ODF nodes on workers
  ansible.builtin.shell:
    cmd: "oc label nodes {{ item }}.{{ domain }} cluster.ocs.openshift.io/openshift-storage='' --overwrite=true"
  with_items: "{{ ocs_nodes|list }}"
  when: is_master_only == 'N' and is_ocs_tainted == 'N'

- name: Configure OCS/ODF nodes for taint
  ansible.builtin.shell: |
    oc label nodes {{ item }}.{{ domain }} cluster.ocs.openshift.io/openshift-storage='' --overwrite=true
    oc label nodes {{ item }}.{{ domain }} node-role.kubernetes.io/infra='' --overwrite=true
  with_items: "{{ ocs_name|list }}"
  when: is_master_only == 'N' and is_ocs_tainted == 'Y'

- name: Configure OCS/ODF nodes on masters
  ansible.builtin.shell:
    cmd: "oc label nodes {{ item }}.{{ domain }} cluster.ocs.openshift.io/openshift-storage='' --overwrite=true"
  with_items: "{{ master_name|list }}"
  when: is_master_only == 'Y'

- name: Create OCS/ODF namespaces
  ansible.builtin.shell:
    cmd: "oc create namespace {{ item }}"
  with_items:
    - openshift-local-storage
    - openshift-storage
  ignore_errors: yes

- name: Deploy local storage operator
  block:
  - name: Configure local storage operator
    ansible.builtin.template:
      src: "local-storage-op.j2"
      dest: "{{ temp_dir }}/olm/local-storage-op.yaml"
    vars:
      operator_source: "{{ 'redhat-operators' if internet_type != 'A' else 'redhat-operator-index' }}"

  - name: Deploy local storage operator
    ansible.builtin.shell:
      cmd: "oc apply -f {{ temp_dir }}/olm/local-storage-op.yaml"

  - name: Wait for local storage operator
    ansible.builtin.shell:
      cmd: "oc get csv -n openshift-local-storage --no-headers -o custom-columns=STATUS:.status.phase"
    register: ls_operator_status
    until: "ls_operator_status.stdout == \"Succeeded\""
    retries: 30
    delay: 10

  - name: Configure local storage deployment file with workers
    ansible.builtin.template:
      src: "local-storage-vol.j2"
      dest: "{{ temp_dir }}/olm/local-storage-vol.yaml"
    vars:
      temp_nodes: "{{ ocs_nodes|list }}"
    when: is_master_only == 'N' and is_ocs_tainted == 'N'

  - name: Configure local storage deployment file in taint
    ansible.builtin.template:
      src: "local-storage-vol-tainted.j2"
      dest: "{{ temp_dir }}/olm/local-storage-vol.yaml"
    vars:
      temp_nodes: "{{ ocs_name|list }}"
    when: is_master_only == 'N' and is_ocs_tainted == 'Y'

  - name: Configure local storage deployment file with masters only
    ansible.builtin.template:
      src: "local-storage-vol.j2"
      dest: "{{ temp_dir }}/olm/local-storage-vol.yaml"
    vars:
      temp_nodes: "{{ master_name|list }}"
    when: is_master_only == 'Y'

  - name: Deploy local storage
    ansible.builtin.shell:
      cmd: "oc apply -f {{ temp_dir }}/olm/local-storage-vol.yaml"

  - name: Wait for local storage deployment
    ansible.builtin.shell:
      cmd: "oc get pv | grep localblock-sc | wc -l"
    register: ls_status
    until: "ls_status.stdout|int >= 3"
    retries: 30
    delay: 10
    when: storage_type == "O"
  when: true

- name: ODF deployment
  block:
  - name: Configure ODF operator file
    template:
      src: "odf-op.j2"
      dest: "{{ temp_dir }}/olm/odf-op.yaml"
    vars:
      operator_source: "{{ 'redhat-operators' if internet_type != 'A' else 'redhat-operator-index' }}"

  - name: Deploy ODF operator
    ansible.builtin.shell:
      cmd: "oc apply -f {{ temp_dir }}/olm/odf-op.yaml"

  - name: Wait for ODF operators appearance
    ansible.builtin.shell:
      cmd: "oc get csv -n openshift-storage --no-headers|wc -l"
    register: odf_operators
    until: "odf_operators.stdout|int == 4"
    retries: 30
    delay: 10

  - name: Wait for ODF operator availability
    ansible.builtin.shell:
      cmd: "oc get csv -n openshift-storage --no-headers -o custom-columns=STATUS:.status.phase|grep -v Succeeded|wc -l"
    register: odf_operator_status
    until: "odf_operator_status.stdout|int == 0"
    retries: 30
    delay: 10

  - name: Enable ODF console plugin in OCP UI
    ansible.builtin.shell:
      cmd: "oc patch console.operator cluster -n openshift-storage --type json -p '[{\"op\": \"add\", \"path\": \"/spec/plugins\", \"value\": [\"odf-console\"]}]'"

  - name: Configure ODF Storage Cluster file
    template:
      src: "odf-ss.j2"
      dest: "{{ temp_dir }}/olm/odf-ss.yaml"

  - name: Deploy ODF cluster
    ansible.builtin.shell:
      cmd: "oc apply -f {{ temp_dir }}/olm/odf-ss.yaml"

  - name: Wait for ODF cluster deployment
    ansible.builtin.shell:
      cmd: "oc get pvc -n openshift-storage --no-headers | grep localblock-sc | grep Bound | wc -l"
    register: ocs_status
    until: "ocs_status.stdout|int >= 3"
    retries: 100
    delay: 15

  - name: Wait - ODF installation finalization
    ansible.builtin.pause:
      minutes: 5

  - name: Deploy Ceph toolbox
    ansible.builtin.shell:
     cmd: "oc patch OCSInitialization ocsinit -n openshift-storage --type json --patch  '[{ \"op\": \"replace\", \"path\": \"/spec/enableCephTools\", \"value\": true }]'"

- name: Configure OCS default storage class
  ansible.builtin.shell:
    cmd: "{{ item.cmd }}"
  with_items:
    - { cmd: "oc patch storageclass ocs-storagecluster-cephfs -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'" }
