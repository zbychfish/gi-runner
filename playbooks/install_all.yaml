    - name: Set parameters for multiple subnets installation
      ansible.builtin.set_fact:
        gateways_list: "{{ lookup('env','GI_SUBNETS_GATEWAYS').split(',') }}"
        dhcp_ranges_list: "{{ lookup('env','GI_SUBNETS_IP_RANGES').split(',') }}"
      when: one_subnet == 'N'

    - name: Check configuration parameters for multiple subnets installation
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_SUBNETS_GATEWAYS", value: "{{ gateways_list }}" }
        - { name: "GI_SUBNETS_IP_RANGES", value: "{{ dhcp_ranges_list }}" }
      when: one_subnet == 'N' and item.value == ""

    - name: Set parameters for air-gapped installation
      ansible.builtin.set_fact:
        archives_dir:  "{{ lookup('env','GI_ARCHIVES_DIR') }}"
        repo_user:  "{{ lookup('env','GI_REPO_USER') }}"
        repo_user_password:  "{{ lookup('env','GI_REPO_USER_PWD') }}"
      when: internet_type == 'A'

    - name: Check configuration parameters for air-gapped installation
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      when: internet_type == 'A' and item.value == ""
      loop:
        - { name: "GI_REPO_USER", value: "{{ repo_user }}" }
        - { name: "GI_REPO_USER_PWD", value: "{{ repo_user_password }}" }
        - { name: "GI_ARCHIVES_DIR", value: "{{ archives_dir }}" }

    - name: Iterates all workers in one array
      ansible.builtin.set_fact:
        nodes: "{{ worker_name|default([])+ocs_name|default([]) }}"
        ips: "{{ worker_ip|default([])+ocs_ip|default([]) }}"

    - name: Set CP4S installation variables from env
      ansible.builtin.set_fact:
        cp4s_namespace: "{{ lookup('env','GI_CP4S_NS') }}"
        cp4s_admin: "{{ lookup('env','GI_CP4S_ADMIN') }}"
        cp4s_sc: "{{ lookup('env','GI_CP4S_SC') }}"
        cp4s_backup_sc: "{{ lookup('env','GI_CP4S_SC_BACKUP') }}"
        cp4s_backup_size: "{{ lookup('env','GI_CP4S_BACKUP_SIZE') }}"
        cp4s_options: "{{ lookup('env','GI_CP4S_OPTS').split(',') }}"
        ics_admin_password: "{{ lookup('env','GI_ICSADMIN_PWD') }}"
        gi_nfs_backup: "N"
      when: install_cp4s == 'Y'

    - name: Check CP4S variables
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_CP4S_NS", value: "{{ cp4s_namespace }}" }
        - { name: "GI_CP4S_ADMIN", value: "{{ cp4s_admin }}" }
        - { name: "GI_CP4S_SC", value: "{{ cp4s_sc }}" }
        - { name: "GI_CP4S_SC_BACKUP", value: "{{ cp4s_backup_sc }}" }
        - { name: "GI_CP4S_BACKUP_SIZE", value: "{{ cp4s_backup_size }}" }
        - { name: "GI_CP4S_OPTS", value: "{{ cp4s_options }}" }
        - { name: "GI_ICSADMIN_PWD", value: "{{ ics_admin_password }}" }
      when: install_cp4s == 'Y' and item.value == ""

    - name: Set CP4S proxy settings
      ansible.builtin.set_fact:
        proxy_url: "{{ lookup('env','GI_PROXY_URL') }}"
        no_proxy_list: "{{ lookup('env','GI_NOPROXY_NET') }}"
        no_proxy_adds: "{{ lookup('env','GI_NOPROXY_NET_ADDS') }}"
      when: install_cp4s == 'Y' and internet_type == 'A'

    - name: Check CP4S variables for proxy settings
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_PROXY_URL", value: "{{ proxy_url }}" }
        - { name: "GI_NOPROXY_NET", value: "{{ no_proxy_list }}" }
          #- { name: "GI_NOPROXY_NET_ADDS", value: "{{ no_proxy_adds }}" }
      when: install_cp4s == 'Y' and internet_type == 'A' and item.value == ""

    - name: Set GI installation variables
      ansible.builtin.set_fact:
        gi_case: "ibm-guardium-insights-{{ gi_case_version }}.tgz"
      when: install_gi == 'Y'

    - name: Set parameters for air-gapped installation
      ansible.builtin.set_fact:
        offline_inventory: "{{ 'gi_arch' if install_gi == 'Y' else 'ics_arch' }}"
        ics_manifest_dir: "{{ 'gi_offline' if install_gi == 'Y' else 'ics_offline' }}"
      when: install_ics == 'Y'

