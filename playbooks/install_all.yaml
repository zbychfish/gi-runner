- hosts: bastion
  vars:
    install_cp4s: "{{ lookup('env','GI_CP4S') }}"

  tasks:
    - name: Check standard configuration parameters
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      when: item.value == ""
      loop:
        - { name: "GI_CP4S", value: "{{ install_cp4s }}" }

    - name: Set parameters for installation with proxy
      ansible.builtin.set_fact:
        proxy_url: "{{ lookup('env','GI_PROXY_URL') }}"
        no_proxy_list: "{{ lookup('env','GI_NOPROXY_NET') }}"
        no_proxy_adds: "{{ lookup('env','GI_NOPROXY_NET_ADDS') }}"
      when: internet_type == 'P'

    - name: Check configuration parameters for installation with proxy
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_PROXY_URL", value: "{{ proxy_url }}" }
        - { name: "GI_NOPROXY_NET", value: "{{ no_proxy_list }}" }
          #- { name: "GI_NOPROXY_NET_ADDS", value: "{{ no_proxy_adds }}" }
      when: internet_type == 'P' and item.value == ""

    - name: Set parameters for multiple subnets installation
      ansible.builtin.set_fact:
        gateways_list: "{{ lookup('env','GI_SUBNETS_GATEWAYS').split(',') }}"
        dhcp_ranges_list: "{{ lookup('env','GI_SUBNETS_IP_RANGES').split(',') }}"
      when: one_subnet == 'N'

    - name: Check configuration parameters for multiple subnets installation
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_SUBNETS_GATEWAYS", value: "{{ gateways_list }}" }
        - { name: "GI_SUBNETS_IP_RANGES", value: "{{ dhcp_ranges_list }}" }
      when: one_subnet == 'N' and item.value == ""

    - name: Set parameters for air-gapped installation
      ansible.builtin.set_fact:
        archives_dir:  "{{ lookup('env','GI_ARCHIVES_DIR') }}"
        repo_user:  "{{ lookup('env','GI_REPO_USER') }}"
        repo_user_password:  "{{ lookup('env','GI_REPO_USER_PWD') }}"
      when: internet_type == 'A'

    - name: Check configuration parameters for air-gapped installation
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      when: internet_type == 'A' and item.value == ""
      loop:
        - { name: "GI_REPO_USER", value: "{{ repo_user }}" }
        - { name: "GI_REPO_USER_PWD", value: "{{ repo_user_password }}" }
        - { name: "GI_ARCHIVES_DIR", value: "{{ archives_dir }}" }

    - name: Iterates all workers in one array
      ansible.builtin.set_fact:
        nodes: "{{ worker_name|default([])+ocs_name|default([]) }}"
        ips: "{{ worker_ip|default([])+ocs_ip|default([]) }}"

    - name: Set GI installation variables from env
      ansible.builtin.set_fact:
        gi_version_index:  "{{ lookup('env','GI_VERSION') }}"
        gi_size:  "{{ lookup('env','GI_SIZE_GI') }}"
        gi_dedicated_nodes: "{{ lookup('env', 'GI_GI_NODES').split(',') }}"
        gi_namespace: "{{ lookup('env','GI_NAMESPACE_GI') }}"
        db2_enc_hint: "{{ lookup('env','GI_DB2_ENCRYPTED') }}"
        db2_nodes_array: "{{ lookup('env','GI_DB2_NODES').split(',') }}"
        db2_tainted: "{{ lookup('env','GI_DB2_TAINTED') }}"
        gi_ext_ingress: "{{ lookup('env','GI_IN') }}"
        gi_deployment_size: "{{ lookup('env','GI_SIZE_GI') }}"
        stap_supp: "{{ lookup('env','GI_STAP_STREAMING') }}"
        gi_ds_size: "{{ lookup('env','GI_DATA_STORAGE_SIZE') }}"
        gi_meta_size: "{{ lookup('env','GI_METADATA_STORAGE_SIZE') }}"
        gi_logs_size: "{{ lookup('env','GI_ARCHIVELOGS_STORAGE_SIZE') }}"
        gi_mongo_size: "{{ lookup('env','GI_MONGO_DATA_STORAGE_SIZE') }}"
        gi_mongo_meta_size:  "{{ lookup('env','GI_MONGO_METADATA_STORAGE_SIZE') }}"
        gi_kafka_size: "{{ lookup('env','GI_KAFKA_STORAGE_SIZE') }}"
        gi_zookeeper_size:  "{{ lookup('env','GI_ZOOKEEPER_STORAGE_SIZE') }}"
        gi_redis_size:  "{{ lookup('env','GI_REDIS_STORAGE_SIZE') }}"
        gi_pgsql_size:  "{{ lookup('env','GI_POSTGRES_STORAGE_SIZE') }}"
        gi_ssh_host: "{{ lookup('env','GI_SSH_HOST') }}"
        gi_ssh_port: "{{ lookup('env','GI_SSH_PORT') }}"
        gi_nfs_backup: "{{ lookup('env','GI_NFS_BACKUP') }}"
      when: install_gi == 'Y'

    - name: Check GI variables
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_VERSION", value: "{{ gi_version_index }}" }
        - { name: "GI_SIZE_GI", value: "{{ gi_size }}" }
        - { name: "GI_GI_NODES", value: "{{ gi_dedicated_nodes }}" }
        - { name: "GI_NAMESPACE_GI", value: "{{ gi_namespace }}" }
        - { name: "GI_DB2_ENCRYPTED", value: "{{ db2_enc_hint }}" }
        - { name: "GI_DB2_TAINTED", value: "{{ db2_tainted }}" }
        - { name: "GI_DB2_NODES", value: "{{ db2_nodes_array }}" }
        - { name: "GI_IN", value: "{{ gi_ext_ingress }}" }
        - { name: "GI_SIZE_GI", value: "{{ gi_deployment_size }}" }
        - { name: "GI_STAP_STREAMING", value: "{{ stap_supp }}" }
        - { name: "GI_DATA_STORAGE_SIZE", value: "{{ gi_ds_size }}" }
        - { name: "GI_METADATA_STORAGE_SIZE", value: "{{ gi_meta_size }}" }
        - { name: "GI_ARCHIVELOGS_STORAGE_SIZE", value: "{{ gi_logs_size }}" }
        - { name: "GI_MONGO_DATA_STORAGE_SIZE", value: "{{ gi_mongo_size }}" }
        - { name: "GI_MONGO_METADATA_STORAGE_SIZE", value: "{{ gi_mongo_meta_size }}" }
        - { name: "GI_KAFKA_STORAGE_SIZE", value: "{{ gi_kafka_size }}" }
        - { name: "GI_ZOOKEEPER_STORAGE_SIZE", value: "{{ gi_zookeeper_size }}" }
        - { name: "GI_REDIS_STORAGE_SIZE", value: "{{ gi_redis_size }}" }
        - { name: "GI_POSTGRES_STORAGE_SIZE", value: "{{ gi_pgsql_size }}" }
        - { name: "GI_SSH_HOST", value: "{{ gi_ssh_host }}" }
        - { name: "GI_SSH_PORT", value: "{{ gi_ssh_port }}" }
        - { name: "GI_NFS_BACKUP", value: "{{ gi_nfs_backup }}" }
      when: install_gi == 'Y' and item.value == ""

    - name: Set GI NFS variables
      ansible.builtin.set_fact:
        gi_nfs_server: "{{ lookup('env','GI_NFS_SERVER') }}"
        gi_nfs_path: "{{ lookup('env','GI_NFS_PATH') }}"
      when: install_gi == 'Y' and gi_nfs_backup == 'Y'

    - name: Check GI NFS variables
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_NFS_SERVER", value: "{{ gi_nfs_server }}" }
        - { name: "GI_NFS_PATH", value: "{{ gi_nfs_path }}" }
      when: install_gi == 'Y' and gi_nfs_backup == 'Y' and item.value == ""

    - name: Set CP4S installation variables from env
      ansible.builtin.set_fact:
        cp4s_namespace: "{{ lookup('env','GI_CP4S_NS') }}"
        cp4s_admin: "{{ lookup('env','GI_CP4S_ADMIN') }}"
        cp4s_sc: "{{ lookup('env','GI_CP4S_SC') }}"
        cp4s_backup_sc: "{{ lookup('env','GI_CP4S_SC_BACKUP') }}"
        cp4s_backup_size: "{{ lookup('env','GI_CP4S_BACKUP_SIZE') }}"
        cp4s_options: "{{ lookup('env','GI_CP4S_OPTS').split(',') }}"
        ics_admin_password: "{{ lookup('env','GI_ICSADMIN_PWD') }}"
        cp4s_ext_ingress: "{{ lookup('env','GI_CP4S_IN') }}"
        gi_nfs_backup: "N"
      when: install_cp4s == 'Y'

    - name: Check CP4S variables
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_CP4S_NS", value: "{{ cp4s_namespace }}" }
        - { name: "GI_CP4S_ADMIN", value: "{{ cp4s_admin }}" }
        - { name: "GI_CP4S_SC", value: "{{ cp4s_sc }}" }
        - { name: "GI_CP4S_SC_BACKUP", value: "{{ cp4s_backup_sc }}" }
        - { name: "GI_CP4S_BACKUP_SIZE", value: "{{ cp4s_backup_size }}" }
        - { name: "GI_CP4S_OPTS", value: "{{ cp4s_options }}" }
        - { name: "GI_ICSADMIN_PWD", value: "{{ ics_admin_password }}" }
        - { name: "GI_CP4S_IN", value: "{{ cp4s_ext_ingress }}" }
      when: install_cp4s == 'Y' and item.value == ""

    - name: Set CP4S proxy settings
      ansible.builtin.set_fact:
        proxy_url: "{{ lookup('env','GI_PROXY_URL') }}"
        no_proxy_list: "{{ lookup('env','GI_NOPROXY_NET') }}"
        no_proxy_adds: "{{ lookup('env','GI_NOPROXY_NET_ADDS') }}"
      when: install_cp4s == 'Y' and internet_type == 'A'

    - name: Check CP4S variables for proxy settings
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_PROXY_URL", value: "{{ proxy_url }}" }
        - { name: "GI_NOPROXY_NET", value: "{{ no_proxy_list }}" }
          #- { name: "GI_NOPROXY_NET_ADDS", value: "{{ no_proxy_adds }}" }
      when: install_cp4s == 'Y' and internet_type == 'A' and item.value == ""

    - name: Set OCS nodes list
      ansible.builtin.set_fact:
        ocs_nodes: "{{ lookup('env', 'GI_OCS_NODES').split(',') }}"
      when: storage_type == 'O' and is_ocs_tainted == 'N'

    - name: Check OCS nodes list
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_OCS_NODES", value: "{{ ocs_nodes }}" }
      when: storage_type == 'O' and is_ocs_tainted == 'N' and item.value == ""

    - name: Set parameters for non air-gapped installation
      ansible.builtin.set_fact:
        ibm_secret:  "{{ lookup('env','GI_IBM_SECRET') }}"
      when: (install_gi == 'Y' or install_cp4s == 'Y') and internet_type != 'A'

    - name: Check configuration parameters for non air-gapped installation
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_IBM_SECRET", value: "{{ ibm_secret }}" }
      when: internet_type != 'A' and (install_gi == 'Y' or install_cp4s == 'Y') and item.value == ""

    - name: Set Portworx variables
      ansible.builtin.set_fact:
        px_id: "{{ lookup('env', 'GI_PX_ID') }}"
      when: storage_type == 'P'

    - name: Check Portworx variables
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_PX_ID", value: "{{ px_id }}" }
      when: storage_type == 'P' and item.value == ""

    - name: Set GI cert variables
      ansible.builtin.set_fact:
        gi_ca: "{{ lookup('env', 'GI_IN_CA') }}"
        gi_cert: "{{ lookup('env', 'GI_IN_CERT') }}"
        gi_key: "{{ lookup('env', 'GI_IN_KEY') }}"
      when: install_gi == 'Y' and gi_ext_ingress == 'Y'

    - name: Check GI cert variables
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_IN_CA", value: "{{ gi_ca }}" }
        - { name: "GI_IN_CERT", value: "{{ gi_cert }}" }
        - { name: "GI_IN_KEY", value: "{{ gi_key }}" }
      when: install_gi == 'Y' and gi_ext_ingress == 'Y' and item.value == ""

    - name: Set CP4S cert variables
      ansible.builtin.set_fact:
        cp4s_ca: "{{ lookup('env', 'GI_CP4S_CA') }}"
        cp4s_cert: "{{ lookup('env', 'GI_CP4S_CERT') }}"
        cp4s_key: "{{ lookup('env', 'GI_CP4S_KEY') }}"
      when: install_cp4s == 'Y' and cp4s_ext_ingress == 'Y'

    - name: Check CP4S cert variables
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_CP4S_CA", value: "{{ cp4s_ca }}" }
        - { name: "GI_CP4S_CERT", value: "{{ cp4s_cert }}" }
        - { name: "GI_CP4S_KEY", value: "{{ cp4s_key }}" }
      when: install_cp4s == 'Y' and cp4s_ext_ingress == 'Y' and item.value == ""

    - name: Set GI installation variables
      ansible.builtin.set_fact:
        gi_version: "{{ gi_versions[gi_version_index|int] }}"
        gi_case_version: "{{ gi_cases[gi_version_index|int] }}"
        db2_enc: "{{ 'YES' if db2_enc_hint == 'Y' else 'NO' }}"
        db2_nodes_list: "{{ db2_nodes_array|product([domain])|map('join','.')|join(',') }}"
        gi_license: "{{ '' if gi_version_index|int < 0 else 'L-GBLK-CDVHGZ' }}"
        add_options1: "{{ ' -t false' if db2_tainted == 'N' else ' -t true' if db2_tainted == 'Y' else '' }}"
        add_options2: "{{ ' -c '+gi_ca+' -f '+gi_cert+' -k '+gi_key if gi_ext_ingress == 'Y' else '' }}"
        db2_class_fs: "{{ 'portworx-db2-rwx-sc' if storage_type == 'P' else storage_class_rw_many }}"
        db2_class_block: "{{ 'portworx-db2-rwo-sc' if storage_type == 'P' else storage_class_rw_one }}"
      when: install_gi == 'Y'

    - name: Set GI installation variables
      ansible.builtin.set_fact:
        gi_case: "ibm-guardium-insights-{{ gi_case_version }}.tgz"
      when: install_gi == 'Y'

    - name: Set GI installation variables
      ansible.builtin.set_fact:
        outliers_demo: "{{ lookup('env', 'GI_OUTLIERS_DEMO') }}"
      when: install_gi == 'Y'

    - name: Check GI installation variables
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_OUTLIERS_DEMO", value: "{{ outliers_demo }}" }
      when: install_gi == 'Y' and item.value == ""

    - name: Set parameters for air-gapped installation
      ansible.builtin.set_fact:
        offline_inventory: "{{ 'gi_arch' if install_gi == 'Y' else 'ics_arch' }}"
        ics_manifest_dir: "{{ 'gi_offline' if install_gi == 'Y' else 'ics_offline' }}"
      when: install_ics == 'Y'

    - name: Install ODF
      ansible.builtin.include_tasks: ocs_install.yaml
      when: skip_phase|int < 3 and storage_type == 'O'

    - name: Install Portworx
      ansible.builtin.include_tasks: px_install.yaml
      when: skip_phase|int < 3 and storage_type == 'P'

    - name: Install NFS client
      ansible.builtin.include_tasks: nfs_client_install.yaml
      when: skip_phase|int < 6 and install_gi == 'Y' and gi_nfs_backup == 'Y'

    - name: Install GI
      ansible.builtin.include_tasks: gi_install.yaml
      when: skip_phase|int < 7 and install_gi == 'Y'

    - name: Install CP4S
      ansible.builtin.include_tasks: cp4s_install.yaml
      when: skip_phase|int < 7 and install_cp4s == 'Y'

    - name: GI info
      ansible.builtin.debug:
        msg:
          - "GI {{ gi_version }} installation finished"
          - Update the hosts file on your web browser workstation
          - "{{ bas_ip }} insights.apps.{{ domain }}"
          - "Login to GI console as admin - https://insights.apps.{{ domain }}"
          - "{{ '' if skip_phase|int > 4 else 'SSH port '+ssh_node_port.stdout+' integration with GDP routed and opened on bastion' }}"
      when: install_gi == 'Y'

    - name: CP4S info
      ansible.builtin.debug:
        msg:
          - "CP4S installation finished"
          - Update the hosts file on your web browser workstation
          - "{{ bas_ip }} cp4s.apps.{{ domain }}"
      when: install_cp4s == 'Y'

    - name: LDAP info
      ansible.builtin.debug:
        msg:
          - "Open LDAP installed"
          - "LDAP instance configured in ICS with name openldap"
      when: install_ldap == 'Y'

