- hosts: bastion
  vars:
    install_cp4s: "{{ lookup('env','GI_CP4S') }}"

  tasks:
    - name: Check standard configuration parameters
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      when: item.value == ""
      loop:
        - { name: "GI_CP4S", value: "{{ install_cp4s }}" }

    - name: Set parameters for installation with proxy
      ansible.builtin.set_fact:
        proxy_url: "{{ lookup('env','GI_PROXY_URL') }}"
        no_proxy_list: "{{ lookup('env','GI_NOPROXY_NET') }}"
        no_proxy_adds: "{{ lookup('env','GI_NOPROXY_NET_ADDS') }}"
      when: internet_type == 'P'

    - name: Check configuration parameters for installation with proxy
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_PROXY_URL", value: "{{ proxy_url }}" }
        - { name: "GI_NOPROXY_NET", value: "{{ no_proxy_list }}" }
          #- { name: "GI_NOPROXY_NET_ADDS", value: "{{ no_proxy_adds }}" }
      when: internet_type == 'P' and item.value == ""

    - name: Set parameters for multiple subnets installation
      ansible.builtin.set_fact:
        gateways_list: "{{ lookup('env','GI_SUBNETS_GATEWAYS').split(',') }}"
        dhcp_ranges_list: "{{ lookup('env','GI_SUBNETS_IP_RANGES').split(',') }}"
      when: one_subnet == 'N'

    - name: Check configuration parameters for multiple subnets installation
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_SUBNETS_GATEWAYS", value: "{{ gateways_list }}" }
        - { name: "GI_SUBNETS_IP_RANGES", value: "{{ dhcp_ranges_list }}" }
      when: one_subnet == 'N' and item.value == ""

    - name: Set parameters for air-gapped installation
      ansible.builtin.set_fact:
        archives_dir:  "{{ lookup('env','GI_ARCHIVES_DIR') }}"
        repo_user:  "{{ lookup('env','GI_REPO_USER') }}"
        repo_user_password:  "{{ lookup('env','GI_REPO_USER_PWD') }}"
      when: internet_type == 'A'

    - name: Check configuration parameters for air-gapped installation
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      when: internet_type == 'A' and item.value == ""
      loop:
        - { name: "GI_REPO_USER", value: "{{ repo_user }}" }
        - { name: "GI_REPO_USER_PWD", value: "{{ repo_user_password }}" }
        - { name: "GI_ARCHIVES_DIR", value: "{{ archives_dir }}" }

    - name: Iterates all workers in one array
      ansible.builtin.set_fact:
        nodes: "{{ worker_name|default([])+ocs_name|default([]) }}"
        ips: "{{ worker_ip|default([])+ocs_ip|default([]) }}"

    - name: Set GI installation variables from env
      ansible.builtin.set_fact:
        stap_supp: "{{ lookup('env','GI_STAP_STREAMING') }}"
      when: install_gi == 'Y'

    - name: Check GI variables
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_STAP_STREAMING", value: "{{ stap_supp }}" }
      when: install_gi == 'Y' and item.value == ""

    - name: Set CP4S installation variables from env
      ansible.builtin.set_fact:
        cp4s_namespace: "{{ lookup('env','GI_CP4S_NS') }}"
        cp4s_admin: "{{ lookup('env','GI_CP4S_ADMIN') }}"
        cp4s_sc: "{{ lookup('env','GI_CP4S_SC') }}"
        cp4s_backup_sc: "{{ lookup('env','GI_CP4S_SC_BACKUP') }}"
        cp4s_backup_size: "{{ lookup('env','GI_CP4S_BACKUP_SIZE') }}"
        cp4s_options: "{{ lookup('env','GI_CP4S_OPTS').split(',') }}"
        ics_admin_password: "{{ lookup('env','GI_ICSADMIN_PWD') }}"
        cp4s_ext_ingress: "{{ lookup('env','GI_CP4S_IN') }}"
        gi_nfs_backup: "N"
      when: install_cp4s == 'Y'

    - name: Check CP4S variables
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_CP4S_NS", value: "{{ cp4s_namespace }}" }
        - { name: "GI_CP4S_ADMIN", value: "{{ cp4s_admin }}" }
        - { name: "GI_CP4S_SC", value: "{{ cp4s_sc }}" }
        - { name: "GI_CP4S_SC_BACKUP", value: "{{ cp4s_backup_sc }}" }
        - { name: "GI_CP4S_BACKUP_SIZE", value: "{{ cp4s_backup_size }}" }
        - { name: "GI_CP4S_OPTS", value: "{{ cp4s_options }}" }
        - { name: "GI_ICSADMIN_PWD", value: "{{ ics_admin_password }}" }
        - { name: "GI_CP4S_IN", value: "{{ cp4s_ext_ingress }}" }
      when: install_cp4s == 'Y' and item.value == ""

    - name: Set CP4S proxy settings
      ansible.builtin.set_fact:
        proxy_url: "{{ lookup('env','GI_PROXY_URL') }}"
        no_proxy_list: "{{ lookup('env','GI_NOPROXY_NET') }}"
        no_proxy_adds: "{{ lookup('env','GI_NOPROXY_NET_ADDS') }}"
      when: install_cp4s == 'Y' and internet_type == 'A'

    - name: Check CP4S variables for proxy settings
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_PROXY_URL", value: "{{ proxy_url }}" }
        - { name: "GI_NOPROXY_NET", value: "{{ no_proxy_list }}" }
          #- { name: "GI_NOPROXY_NET_ADDS", value: "{{ no_proxy_adds }}" }
      when: install_cp4s == 'Y' and internet_type == 'A' and item.value == ""

    - name: Set OCS nodes list
      ansible.builtin.set_fact:
        ocs_nodes: "{{ lookup('env', 'GI_OCS_NODES').split(',') }}"
      when: storage_type == 'O' and is_ocs_tainted == 'N'

    - name: Check OCS nodes list
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_OCS_NODES", value: "{{ ocs_nodes }}" }
      when: storage_type == 'O' and is_ocs_tainted == 'N' and item.value == ""

    - name: Set Portworx variables
      ansible.builtin.set_fact:
        px_id: "{{ lookup('env', 'GI_PX_ID') }}"
      when: storage_type == 'P'

    - name: Check Portworx variables
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_PX_ID", value: "{{ px_id }}" }
      when: storage_type == 'P' and item.value == ""

    - name: Set CP4S cert variables
      ansible.builtin.set_fact:
        cp4s_ca: "{{ lookup('env', 'GI_CP4S_CA') }}"
        cp4s_cert: "{{ lookup('env', 'GI_CP4S_CERT') }}"
        cp4s_key: "{{ lookup('env', 'GI_CP4S_KEY') }}"
      when: install_cp4s == 'Y' and cp4s_ext_ingress == 'Y'

    - name: Check CP4S cert variables
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_CP4S_CA", value: "{{ cp4s_ca }}" }
        - { name: "GI_CP4S_CERT", value: "{{ cp4s_cert }}" }
        - { name: "GI_CP4S_KEY", value: "{{ cp4s_key }}" }
      when: install_cp4s == 'Y' and cp4s_ext_ingress == 'Y' and item.value == ""

    - name: Set GI installation variables
      ansible.builtin.set_fact:
        db2_class_fs: "{{ 'portworx-db2-rwx-sc' if storage_type == 'P' else storage_class_rw_many }}"
        db2_class_block: "{{ 'portworx-db2-rwo-sc' if storage_type == 'P' else storage_class_rw_one }}"
      when: install_gi == 'Y'

    - name: Set GI installation variables
      ansible.builtin.set_fact:
        gi_case: "ibm-guardium-insights-{{ gi_case_version }}.tgz"
      when: install_gi == 'Y'

    - name: Set GI installation variables
      ansible.builtin.set_fact:
        outliers_demo: "{{ lookup('env', 'GI_OUTLIERS_DEMO') }}"
      when: install_gi == 'Y'

    - name: Check GI installation variables
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_OUTLIERS_DEMO", value: "{{ outliers_demo }}" }
      when: install_gi == 'Y' and item.value == ""

    - name: Set parameters for air-gapped installation
      ansible.builtin.set_fact:
        offline_inventory: "{{ 'gi_arch' if install_gi == 'Y' else 'ics_arch' }}"
        ics_manifest_dir: "{{ 'gi_offline' if install_gi == 'Y' else 'ics_offline' }}"
      when: install_ics == 'Y'

    - name: Install ODF
      ansible.builtin.include_tasks: ocs_install.yaml
      when: skip_phase|int < 3 and storage_type == 'O'

    - name: Install Portworx
      ansible.builtin.include_tasks: px_install.yaml
      when: skip_phase|int < 3 and storage_type == 'P'

    - name: Install CP4S
      ansible.builtin.include_tasks: cp4s_install.yaml
      when: skip_phase|int < 7 and install_cp4s == 'Y'

    - name: GI info
      ansible.builtin.debug:
        msg:
          - "GI {{ gi_version }} installation finished"
          - Update the hosts file on your web browser workstation
          - "{{ bas_ip }} insights.apps.{{ domain }}"
          - "Login to GI console as admin - https://insights.apps.{{ domain }}"
          - "{{ '' if skip_phase|int > 4 else 'SSH port '+ssh_node_port.stdout+' integration with GDP routed and opened on bastion' }}"
      when: install_gi == 'Y'

    - name: CP4S info
      ansible.builtin.debug:
        msg:
          - "CP4S installation finished"
          - Update the hosts file on your web browser workstation
          - "{{ bas_ip }} cp4s.apps.{{ domain }}"
      when: install_cp4s == 'Y'

