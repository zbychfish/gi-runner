- name: Create temp subdirectories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
  with_items:
    - { path: "{{ temp_dir }}/coreos" }
    - { path: "{{ temp_dir }}/adds" }
    - { path: "{{ temp_dir }}/os" }
    - { path: "{{ temp_dir }}/rook" }
    - { path: "{{ temp_dir }}/olm" }
    - { path: "{{ temp_dir }}/ics_arch" }
    - { path: "{{ temp_dir }}/gi_arch" }
    - { path: "{{ temp_dir }}/cp4s" }
    - { path: "{{ temp_dir }}/gi_arch/cases" }

- name: Create portable registry directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
  with_items:
    - { path: "/opt/registry/data" }
    - { path: "/opt/registry/auth" }
    - { path: "/opt/registry/certs" }
  when: internet_type == 'A'

- name: Create registry certificate
  block:
    - name: Generate an OpenSSL private key for registry
      community.crypto.openssl_privatekey:
        path: /opt/registry/certs/bastion.repo.pem
        size: 4096
        force: 'yes'
        type: RSA
    
    - name: Generate an OpenSSL Certificate Signing Request with subjectAltName extension
      community.crypto.openssl_csr:
        path: /opt/registry/certs/bastion.repo.csr
        privatekey_path: /opt/registry/certs/bastion.repo.pem
        subject_alt_name: 'DNS:registry.{{ domain }}'
        common_name: 'CN=registry.{{ domain }}'
        state_or_province_name: 'Lubuskie'
        country_name: 'PL'
        locality_name: 'Nowa Sol'
        organization_name: "Test"
        organizational_unit_name: "Test"
        force: yes
        digest: 'sha256'

    - name: Create certificate for registry
      community.crypto.x509_certificate:
        path: /opt/registry/certs/bastion.repo.crt
        privatekey_path: /opt/registry/certs/bastion.repo.pem
        csr_path: /opt/registry/certs/bastion.repo.csr
        selfsigned_not_after: "+3650d"
        force: yes
        provider: selfsigned
  when: internet_type == 'A' and false

- name: Create certificate for registry
  shell:
    cmd: "openssl req -newkey rsa:4096 -nodes -sha256 -keyout /opt/registry/certs/bastion.repo.pem -x509 -days 3650 -out /opt/registry/certs/bastion.repo.crt -subj \"/C=PL/ST=Miedzyrzecz/L=/O=Test /OU=Test/CN=registry.{{ domain }}\" -addext \"subjectAltName = DNS:registry.{{ domain }}\""
  when: internet_type == 'A'

- name: Copy CA cert to Centos PKI
  ansible.builtin.copy:
    src: /opt/registry/certs/bastion.repo.crt
    dest: /etc/pki/ca-trust/source/anchors/
  when: internet_type == 'A'

- name: Register self-signed CA
  ansible.builtin.shell:
    cmd: update-ca-trust extract
  when: internet_type == 'A'

- name: Cleanup httpasswd file
  ansible.builtin.file:
    path: /opt/registry/auth/bastion.repo.htpasswd
    state: absent
  when: internet_type == 'A'

- name: Create htpasswd file
  community.general.htpasswd:
    path: /opt/registry/auth/bastion.repo.htpasswd
    name: "{{ repo_user }}"
    crypt_scheme: bcrypt
    password: "{{ repo_user_password }}"
  when: internet_type == 'A'

- name: Open ports on bastion for offline installation
  ansible.builtin.firewalld:
    port: "{{ item.port }}/{{ item.type }}"
    permanent: yes
    immediate: yes
    state: enabled
  with_items:
    - { port: "5000", type: "tcp" }
  when: internet_type == 'A'

- name: Load image registry into local repository
  containers.podman.podman_load:
    input: "{{ temp_dir }}/coreos/oc-registry.tar"
  when: internet_type == 'A'

- name: Check image repository existence
  containers.podman.podman_container_info:
    name: bastion-registry
  register: is_repo_available
  when: internet_type == 'A'

- name: Remove existing bastion image registry container
  containers.podman.podman_container:
    name: bastion-registry
    state: absent
  when: (internet_type == 'A') and (is_repo_available.containers | length == '1')

- name: Setup image registry
  containers.podman.podman_container:
    name: bastion-registry
    state: started
    image: "docker.io/library/registry:{{ registry_version }}"
    ports: 5000:5000
    env: {
      "REGISTRY_HTTP_TLS_CERTIFICATE": "/certs/bastion.repo.crt",
      "REGISTRY_HTTP_TLS_KEY": "/certs/bastion.repo.pem",
      "REGISTRY_AUTH_HTPASSWD_PATH": "/auth/bastion.repo.htpasswd",
      "REGISTRY_AUTH": "htpasswd",
      "REGISTRY_AUTH_HTPASSWD_REALM": "Registry",
      "REGISTRY_HTTP_SECRET": "ALongRandomSecretForRegistry",
    }
    volume:
      - /opt/registry/data:/var/lib/registry:z
      - /opt/registry/auth:/auth:z
      - /opt/registry/certs:/certs:z
  when: internet_type == 'A'

- name: Set SELINUX permissive access for NetworkManager
  ansible.builtin.shell:
    cmd: semanage permissive -a NetworkManager_t
  when: internet_type == 'A'

- name: Set variable for public SSH key
  ansible.builtin.shell: >
    cat "{{ ssh_key }}.pub"
  register: ssh_pub_key

- name: Stop if matchbox not uploaded for air-gapped installation
  ansible.builtin.fail:
    msg: "Please upload matchbox to download directory"
  when: internet_type == 'A' and matchbox_presence.stat.exists == false

- name: Stop if RHCOS images are not uploaded for air-gapped installation
  ansible.builtin.fail:
    msg: "Please upload RHCOS images to download directory"
  with_items: "{{ rhcos_images.results }}"
  when: item.stat.exists == False and internet_type == 'A'

- name: Add gateways to dnsmasq.conf for multiple subnets installation
  ansible.builtin.lineinfile:
    path: /etc/dnsmasq.conf
    line: "dhcp-option=vlan{{ ansible_loop.index }},3,{{ item }}"
  with_items: "{{ gateways_list }}"
  loop_control:
    extended: yes
  when: one_subnet == 'N'

- name: Add dhcp ranges to dnsmasq.conf for multiple subnets installation
  ansible.builtin.lineinfile:
    path: /etc/dnsmasq.conf
    line: "dhcp-range=vlan{{ ansible_loop.index }},{{ item | replace('-',',') }},12h"
  with_items: "{{ dhcp_ranges_list }}"
  loop_control:
    extended: yes
  when: one_subnet == 'N'

- name: Add lines to dnsmasq.conf for one subnet installation
  ansible.builtin.lineinfile:
    path: /etc/dnsmasq.conf
    line: "{{ item }}"
  with_items:
    - "dhcp-option=3,{{ bas_gw }}"
    - "dhcp-range={{ dhcp_range_start }},{{ dhcp_range_stop }},12h"
  when: one_subnet == 'Y'

- name: Add  PTR lines to dnsmasq.conf
  ansible.builtin.lineinfile:
    path: /etc/dnsmasq.conf
    line: "{{ item.stdout }}"
  with_items: "{{ node_ptr.results }}"

- name: Add DHCP lines to dnsmasq.conf
  ansible.builtin.lineinfile:
    path: /etc/dnsmasq.conf
    line: "{{ item.stdout }}"
  with_items: "{{ node_dhcp.results }}"

- name: Add DNS lines to dnsmasq.conf
  ansible.builtin.lineinfile:
    path: /etc/dnsmasq.conf
    line: "{{ item.stdout }}"
  with_items: "{{ node_dns.results }}"

- name: Add DNS forwarder to dnsmasq.conf
  ansible.builtin.lineinfile:
    path: /etc/dnsmasq.conf
    line: "{{ item }}"
  with_items:
    - "server={{ dns_forwarder }}"
    - "address=/.{{ domain }}/"

- name: Get bastion interface name
  ansible.builtin.shell:
    cmd: "nmcli c show | grep {{ bas_int }} | awk '{print $1}'"
  register: bas_int_name

- name: Set self DNS for interface
  ansible.builtin.command:
    cmd: "{{ item }}"
  with_items:
    - "nmcli c modify {{ bas_int_name.stdout }} ipv4.dns \"{{ bas_ip }}\""

- name: Start and enable dnsmasq
  ansible.builtin.service:
    name: dnsmasq
    state: restarted
    enabled: yes

- name: Restart systemd-resolved
  ansible.builtin.service:
    name: systemd-resolved
    state: restarted

- name: Restart Network Manager
  ansible.builtin.service:
    name: NetworkManager
    state: restarted

- name: Resolve some cluster names to check DNS state
  ansible.builtin.debug:
    msg:
      - "Resolve IP of {{ bas_name }}.{{ domain }} - {{ lookup('dig', '{{ bas_name }}.{{ domain }}.', '@127.0.0.1') }}"
      - "Resolve IP of registry.{{ domain }} - {{ lookup('dig', 'registry.{{ domain }}.', '@127.0.0.1') }}"
      - "Resolve IP of {{ boot_name }}.{{ domain }} - {{ lookup('dig', '{{ boot_name }}.{{ domain }}.', '@127.0.0.1') }}"
      - "Resolve IP of api.{{ domain }} - {{ lookup('dig', 'api.{{ domain }}.', '@127.0.0.1') }}"
      - "Resolve IP of api-int.{{ domain }} - {{ lookup('dig', 'api-int.{{ domain }}.', '@127.0.0.1') }}"
      - "Resolve IP of insights.apps.{{ domain }} - {{ lookup('dig', 'insights.apps.{{ domain }}.', '@127.0.0.1') }}"
      - "Resolve name from IP for {{ boot_ip }} - {{ lookup('dig', '{{ boot_ptr.stdout }}./PTR', '@127.0.0.1') }}"

- name: Set SELINUX for dnsmasq
  shell:
    cmd: semanage permissive -a dnsmasq_t

- name: Gather info about specific pods
  containers.podman.podman_container_info:
    name: bastion-registry
  register: repo_status
  failed_when:   "'5000/tcp' not in repo_status.containers[0].HostConfig.PortBindings"
  when: internet_type == 'A'
  
- name: Check presence of RHCOS tools
  ansible.builtin.stat:
    path: "{{ temp_dir }}/coreos/{{ item.file }}"
  register: rhcos_tools
  with_items:
    - { file: "openshift-client-linux.tar.gz" }
    - { file: "openshift-install-linux.tar.gz" }
  ignore_errors: true

- name: Stop if RHCOS tools are not uploaded for air-gapped installation
  ansible.builtin.fail:
    msg: "Please upload RHCOS tools to download directory"
  with_items: "{{ rhcos_tools.results }}"
  when: item.stat.exists == False and internet_type == 'A'

- name: "Download RHCOS tools {{ ocp_release }}"
  ansible.builtin.get_url:
    url: "https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/{{ 'stable-'+ocp_major_release if ocp_minor_release == 'latest' else ocp_release }}/{{ item.item.file }}"
    dest: "{{ temp_dir }}/coreos"
    use_proxy: "{{ 'yes' if internet_type == 'P' else 'no' }}"
  with_items: "{{ rhcos_tools.results }}"
  when: item.stat.exists == False and internet_type != 'A'

- name: Download oc ibm-pak
  ansible.builtin.get_url:
    url: "https://github.com/IBM/ibm-pak/releases/download/v{{ ibm_pak_version }}/oc-ibm_pak-linux-amd64.tar.gz"
    dest: "{{ temp_dir }}/coreos"
    use_proxy: "{{ 'yes' if internet_type == 'P' else 'no' }}"
  when: internet_type != 'A'

- name: Unpack OCP tools
  ansible.builtin.shell:
    cmd: "tar xf {{ temp_dir }}/coreos/{{ item.src }} -C /usr/local/bin"
  with_items:
    - { src: "openshift-client-linux.tar.gz" }
    - { src: "openshift-install-linux.tar.gz" }

- name: Unpack OCP tools for offline
  ansible.builtin.shell:
    cmd: "tar xf {{ temp_dir }}/coreos/{{ item.src }} -C /usr/local/bin"
  with_items:
    - { src: "oc-mirror.tar.gz" }
  when: internet_type == 'A'

- name: Correct file settings for oc-mirror
  ansible.builtin.file:
    path: /usr/local/bin/oc-mirror
    mode: 0755
    owner: root
    group: root
  when: internet_type == 'A'

- name: Unpack OCP tools for Guardium Insights
  ansible.builtin.shell:
    cmd: "tar xf {{ temp_dir }}/coreos/{{ item.src }} -C /usr/local/bin"
  with_items:
    - { src: "oc-ibm_pak-linux-amd64.tar.gz" }
  when: install_gi == 'Y'

- name: Rename oc ibm-pak file
  ansible.builtin.shell:
    cmd: "mv /usr/local/bin/oc-ibm_pak-linux-amd64 /usr/local/bin/oc-ibm_pak"
  when: install_gi == 'Y'

- name: Define base and ocp domain
  ansible.builtin.set_fact:
    base_domain: "{{ domain.split('.')[1:] | join('.') }}"
    ocp_domain: "{{ domain.split('.')[0] }}"

- name: Create local repo authentication string
  ansible.builtin.shell:
    cmd: "echo -n '{{ repo_user }}:{{ repo_user_password }}' | base64 -w0"
  register: repo_cred_base64
  when: internet_type == 'A'

- name: Copy local image repository certificate into variable
  ansible.builtin.shell:
    cmd: "cat /opt/registry/certs/bastion.repo.crt | awk '{print \"  \"$0}'"
  register: repo_cert
  when: internet_type == 'A'

- name: Create OCP config file in air-gapped env
  ansible.builtin.template:
    src: install-config-air-gapped.j2
    dest: ../ocp/install-config.yaml
  vars:
    n_workers: "{{ worker_ip|default([])|length+ocs_ip|default([])|length }}"
    n_masters: "{{ master_ip|length }}"
  when: internet_type == 'A' and install_cp4s == 'N'

- name: Create OCP config file in air-gapped env for CP4S
  ansible.builtin.template:
    src: install-config-air-gapped-cp4s.j2
    dest: ../ocp/install-config.yaml
  vars:
    n_workers: "{{ worker_ip|default([])|length+ocs_ip|default([])|length }}"
    n_masters: "{{ master_ip|length }}"
  when: internet_type == 'A' and install_cp4s == 'Y'

- name: Create OCP config for standard deployment
  ansible.builtin.template:
    src: install-config.j2
    dest: ../ocp/install-config.yaml
  vars:
    n_workers: "{{ worker_ip|default([])|length+ocs_ip|default([])|length }}"
    n_masters: "{{ master_ip|length }}"
  when: internet_type == 'D'

- name: Create OCP config file with proxy
  ansible.builtin.template:
    src: install-config-proxy.j2
    dest: ../ocp/install-config.yaml
  vars:
    n_workers: "{{ worker_ip|default([])|length+ocs_ip|default([])|length }}"
    n_masters: "{{ master_ip|length }}"
  when: internet_type == 'P'

- name: Add RHN Pull Secret - ansible replaces /" to /'
  ansible.builtin.shell:
    cmd: "cat {{ temp_dir }}/os/pull_secret.tmp >> ../ocp/install-config.yaml"
  when: internet_type != 'A'

- name: Copy install-config for troubleshooting
  ansible.builtin.copy:
    src: "../ocp/install-config.yaml"
    dest: "{{ temp_dir }}/coreos/install-config.yaml"

- name: Create manifests files
  ansible.builtin.command:
    cmd: "{{ item.cmd }}"
  with_items:
    - { cmd: "openshift-install create manifests --dir=../ocp" }

- name: Create ignition files
  ansible.builtin.command:
    cmd: "{{ item.cmd }}"
  with_items:
    - { cmd: "openshift-install create ignition-configs --dir=../ocp" }

- name: Copy ignition files to matchbox
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: matchbox
    mode: 0755
  with_items:
    - { src: "../ocp/bootstrap.ign", dest: "/var/lib/matchbox/ignition/" }
    - { src: "../ocp/master.ign", dest: "/var/lib/matchbox/ignition/" }
    - { src: "../ocp/worker.ign", dest: "/var/lib/matchbox/ignition/" }

- name: Check original HA Proxy config file existence
  ansible.builtin.stat:
    path: "/etc/haproxy/haproxy.cfg.orig"
  register: haproxy_config_presence

- name: Restore original HA Proxy config file
  ansible.builtin.copy:
    dest: "/etc/haproxy/haproxy.cfg"
    src: "/etc/haproxy/haproxy.cfg.orig"
  when: haproxy_config_presence.stat.exists == true

- name: Copy original HA Proxy config file
  ansible.builtin.copy:
    src: /etc/haproxy/haproxy.cfg
    dest: /etc/haproxy/haproxy.cfg.orig

- name: Create HA Proxy config file
  ansible.builtin.template:
    src: haproxy.j2
    dest: /etc/haproxy/haproxy.cfg
  vars:
    masters: "{{ master_name|zip(master_ip)|list }}"
    nodes: "{{ worker_name|default([])+ocs_name|default([]) }}"
    ips: "{{ worker_ip|default([])+ocs_ip|default([]) }}"
    workers: "{{ nodes|zip(ips)|list }}"
  when: is_master_only == 'N'

- name: Create HA Proxy config file
  ansible.builtin.template:
    src: haproxy-no-workers.j2
    dest: /etc/haproxy/haproxy.cfg
  vars:
    masters: "{{ master_name|zip(master_ip)|list }}"
  when: is_master_only == 'Y'

- name: Set SELinux for HA Proxy
  ansible.builtin.command:
    cmd: "{{ item.cmd }}"
  with_items:
    - { cmd: "setsebool -P haproxy_connect_any=1" }
    - { cmd: "semanage permissive -a haproxy_t" }

- name: Start and enable HA Proxy
  ansible.builtin.service:
    name: haproxy
    state: restarted
    enabled: yes
