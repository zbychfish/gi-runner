- name: Create portable registry directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
  with_items:
    - { path: "/opt/registry/data" }
    - { path: "/opt/registry/auth" }
    - { path: "/opt/registry/certs" }
  when: internet_type == 'A'

- name: Create registry certificate
  block:
    - name: Generate an OpenSSL private key for registry
      community.crypto.openssl_privatekey:
        path: /opt/registry/certs/bastion.repo.pem
        size: 4096
        force: 'yes'
        type: RSA
    
    - name: Generate an OpenSSL Certificate Signing Request with subjectAltName extension
      community.crypto.openssl_csr:
        path: /opt/registry/certs/bastion.repo.csr
        privatekey_path: /opt/registry/certs/bastion.repo.pem
        subject_alt_name: 'DNS:registry.{{ domain }}'
        common_name: 'CN=registry.{{ domain }}'
        state_or_province_name: 'Lubuskie'
        country_name: 'PL'
        locality_name: 'Nowa Sol'
        organization_name: "Test"
        organizational_unit_name: "Test"
        force: yes
        digest: 'sha256'

    - name: Create certificate for registry
      community.crypto.x509_certificate:
        path: /opt/registry/certs/bastion.repo.crt
        privatekey_path: /opt/registry/certs/bastion.repo.pem
        csr_path: /opt/registry/certs/bastion.repo.csr
        selfsigned_not_after: "+3650d"
        force: yes
        provider: selfsigned
  when: internet_type == 'A' and false

- name: Create certificate for registry
  shell:
    cmd: "openssl req -newkey rsa:4096 -nodes -sha256 -keyout /opt/registry/certs/bastion.repo.pem -x509 -days 3650 -out /opt/registry/certs/bastion.repo.crt -subj \"/C=PL/ST=Miedzyrzecz/L=/O=Test /OU=Test/CN=registry.{{ domain }}\" -addext \"subjectAltName = DNS:registry.{{ domain }}\""
  when: internet_type == 'A'

- name: Copy CA cert to Centos PKI
  ansible.builtin.copy:
    src: /opt/registry/certs/bastion.repo.crt
    dest: /etc/pki/ca-trust/source/anchors/
  when: internet_type == 'A'

- name: Register self-signed CA
  ansible.builtin.shell:
    cmd: update-ca-trust extract
  when: internet_type == 'A'

- name: Cleanup httpasswd file
  ansible.builtin.file:
    path: /opt/registry/auth/bastion.repo.htpasswd
    state: absent
  when: internet_type == 'A'

- name: Create htpasswd file
  community.general.htpasswd:
    path: /opt/registry/auth/bastion.repo.htpasswd
    name: "{{ repo_user }}"
    crypt_scheme: bcrypt
    password: "{{ repo_user_password }}"
  when: internet_type == 'A'

- name: Open ports on bastion for offline installation
  ansible.builtin.firewalld:
    port: "{{ item.port }}/{{ item.type }}"
    permanent: yes
    immediate: yes
    state: enabled
  with_items:
    - { port: "5000", type: "tcp" }
  when: internet_type == 'A'

- name: Load image registry into local repository
  containers.podman.podman_load:
    input: "{{ temp_dir }}/coreos/oc-registry.tar"
  when: internet_type == 'A'

- name: Check image repository existence
  containers.podman.podman_container_info:
    name: bastion-registry
  register: is_repo_available
  when: internet_type == 'A'

- name: Remove existing bastion image registry container
  containers.podman.podman_container:
    name: bastion-registry
    state: absent
  when: (internet_type == 'A') and (is_repo_available.containers | length == '1')

- name: Setup image registry
  containers.podman.podman_container:
    name: bastion-registry
    state: started
    image: "docker.io/library/registry:{{ registry_version }}"
    ports: 5000:5000
    env: {
      "REGISTRY_HTTP_TLS_CERTIFICATE": "/certs/bastion.repo.crt",
      "REGISTRY_HTTP_TLS_KEY": "/certs/bastion.repo.pem",
      "REGISTRY_AUTH_HTPASSWD_PATH": "/auth/bastion.repo.htpasswd",
      "REGISTRY_AUTH": "htpasswd",
      "REGISTRY_AUTH_HTPASSWD_REALM": "Registry",
      "REGISTRY_HTTP_SECRET": "ALongRandomSecretForRegistry",
    }
    volume:
      - /opt/registry/data:/var/lib/registry:z
      - /opt/registry/auth:/auth:z
      - /opt/registry/certs:/certs:z
  when: internet_type == 'A'

- name: Set SELINUX permissive access for NetworkManager
  ansible.builtin.shell:
    cmd: semanage permissive -a NetworkManager_t
  when: internet_type == 'A'

- name: Stop if matchbox not uploaded for air-gapped installation
  ansible.builtin.fail:
    msg: "Please upload matchbox to download directory"
  when: internet_type == 'A' and matchbox_presence.stat.exists == false

- name: Stop if RHCOS images are not uploaded for air-gapped installation
  ansible.builtin.fail:
    msg: "Please upload RHCOS images to download directory"
  with_items: "{{ rhcos_images.results }}"
  when: item.stat.exists == False and internet_type == 'A'

- name: Add gateways to dnsmasq.conf for multiple subnets installation
  ansible.builtin.lineinfile:
    path: /etc/dnsmasq.conf
    line: "dhcp-option=vlan{{ ansible_loop.index }},3,{{ item }}"
  with_items: "{{ gateways_list }}"
  loop_control:
    extended: yes
  when: one_subnet == 'N'

- name: Add dhcp ranges to dnsmasq.conf for multiple subnets installation
  ansible.builtin.lineinfile:
    path: /etc/dnsmasq.conf
    line: "dhcp-range=vlan{{ ansible_loop.index }},{{ item | replace('-',',') }},12h"
  with_items: "{{ dhcp_ranges_list }}"
  loop_control:
    extended: yes
  when: one_subnet == 'N'

- name: Gather info about specific pods
  containers.podman.podman_container_info:
    name: bastion-registry
  register: repo_status
  failed_when:   "'5000/tcp' not in repo_status.containers[0].HostConfig.PortBindings"
  when: internet_type == 'A'
  
- name: Unpack OCP tools for offline
  ansible.builtin.shell:
    cmd: "tar xf {{ temp_dir }}/coreos/{{ item.src }} -C /usr/local/bin"
  with_items:
    - { src: "oc-mirror.tar.gz" }
  when: internet_type == 'A'

- name: Correct file settings for oc-mirror
  ansible.builtin.file:
    path: /usr/local/bin/oc-mirror
    mode: 0755
    owner: root
    group: root
  when: internet_type == 'A'

- name: Create local repo authentication string
  ansible.builtin.shell:
    cmd: "echo -n '{{ repo_user }}:{{ repo_user_password }}' | base64 -w0"
  register: repo_cred_base64
  when: internet_type == 'A'

- name: Copy local image repository certificate into variable
  ansible.builtin.shell:
    cmd: "cat /opt/registry/certs/bastion.repo.crt | awk '{print \"  \"$0}'"
  register: repo_cert
  when: internet_type == 'A'

- name: Create OCP config file in air-gapped env
  ansible.builtin.template:
    src: install-config-air-gapped.j2
    dest: ../ocp/install-config.yaml
  vars:
    n_workers: "{{ worker_ip|default([])|length+ocs_ip|default([])|length }}"
    n_masters: "{{ master_ip|length }}"
  when: internet_type == 'A' and install_cp4s == 'N'

- name: Create OCP config file in air-gapped env for CP4S
  ansible.builtin.template:
    src: install-config-air-gapped-cp4s.j2
    dest: ../ocp/install-config.yaml
  vars:
    n_workers: "{{ worker_ip|default([])|length+ocs_ip|default([])|length }}"
    n_masters: "{{ master_ip|length }}"
  when: internet_type == 'A' and install_cp4s == 'Y'

- name: Create OCP config file with proxy
  ansible.builtin.template:
    src: install-config-proxy.j2
    dest: ../ocp/install-config.yaml
  vars:
    n_workers: "{{ worker_ip|default([])|length+ocs_ip|default([])|length }}"
    n_masters: "{{ master_ip|length }}"
  when: internet_type == 'P'
