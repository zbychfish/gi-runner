- name: Label ICS nodes
  ansible.builtin.shell:
    cmd: "oc label node {{ item }}.{{ domain }} ics_role=yes --overwrite=true"
  with_items: "{{ ics_dedicated_nodes|list }}"
  when: ics_dedicated_nodes|length > 2

- name: Create ICS namespace with node selector
  ansible.builtin.shell:
    cmd: "{{ item }}"
  with_items:
    - oc create namespace ibm-common-services || echo "Namespace exists"
    - "oc patch namespace ibm-common-services -p '{\"metadata\":{\"annotations\": {\"scheduler.alpha.kubernetes.io/node-selector\": \"ics_role=yes\"}}}'"
  when: ics_dedicated_nodes|length > 2

- name: Stop if cloudct tool is not uploaded for air-gapped installation
  ansible.builtin.fail:
    msg: "Please upload cloud tool to download directory"
  with_items: "{{ cloudctl_tool.results }}"
  when: item.stat.exists == False and internet_type == 'A'

- name: Set catalog reference for CPFS and GI (offline)
  ansible.builtin.shell:
    cmd: "sed -i \"s/image:.*:5000/image: registry.{{ domain }}:5000/\" {{ temp_dir }}/{{ offline_inventory }}/.ibm-pak/data/mirror/ibm-guardium-insights/{{ gi_case_version }}/catalog-sources.yaml"
  when: internet_type == 'A' and install_gi == 'Y'

- name: Set imagecontentsourcepolicy reference for CPFS and GI (offline)
  ansible.builtin.shell:
    cmd: "sed -i \"s/- .*:5000/- registry.{{ domain }}:5000/\" {{ temp_dir }}/{{ offline_inventory }}/.ibm-pak/data/mirror/ibm-guardium-insights/{{ gi_case_version }}/image-content-source-policy.yaml"
  when: internet_type == 'A' and install_gi == 'Y'

- name: Install catalogs for CPFS and GI (offline)
  ansible.builtin.shell:
    cmd: "oc apply -f {{ temp_dir }}/{{ offline_inventory }}/.ibm-pak/data/mirror/ibm-guardium-insights/{{ gi_case_version }}/catalog-sources.yaml"
  when: internet_type == 'A' and install_gi == 'Y'

- name: Install image content source policy for CPFS and GI (offline)
  ansible.builtin.shell:
    cmd: "oc apply -f {{ temp_dir }}/{{ offline_inventory }}/.ibm-pak/data/mirror/ibm-guardium-insights/{{ gi_case_version }}/image-content-source-policy.yaml"
  when: internet_type == 'A' and install_gi == 'Y'

- name: Switch ICS inventory to portable registry
  ansible.builtin.shell:
    cmd: "cloudctl case launch --case {{ temp_dir }}/{{ offline_inventory }}/{{ ics_manifest_dir }}/ibm-cp-common-services-{{ ics_case }}.tgz --inventory {{ ics_case_inventory_setup }} --action configure-cluster-airgap --namespace {{ ics_operator_namespace }}  --args \"--registry registry.{{ domain }}:5000 --user {{ repo_user }} --pass {{ repo_user_password }} --inputDir {{ temp_dir }}/{{ offline_inventory }}/{{ ics_manifest_dir }}\""
  when: internet_type == 'A' and install_gi == 'N'

- name: Install ICS catalog
  ansible.builtin.shell:
    cmd: "cloudctl case launch --case {{ temp_dir }}/{{ offline_inventory }}/{{ ics_manifest_dir }}/ibm-cp-common-services-{{ ics_case }}.tgz --inventory {{ ics_case_inventory_setup }}  --action installCatalog --namespace openshift-marketplace --args \"--registry registry.{{ domain }}:5000\""
  when: internet_type == 'A' and install_gi == 'N'

- name: Login to ICS
  ansible.builtin.shell:
    cmd: "cloudctl login -a https://cp-console.apps.{{ domain }} -u admin -p `oc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 -d` -n kube-system"

- name: Set ICS admin password
  ansible.builtin.shell:
    cmd: "cloudctl pm update-secret ibm-common-services platform-auth-idp-credentials -f -d admin_password='{{ ics_admin_password }}'"

- name: Wait for authentication changes
  ansible.builtin.pause:
    minutes: 3

- name: Wait for successful password change
  ansible.builtin.shell:
    cmd: "oc get pods --no-headers -n ibm-common-services|grep -v Completed|grep -v Running|wc -l"
  register: ics_pods_status
  until: "ics_pods_status.stdout == \"0\""
  retries: 80
  delay: 20

- name: Switch off automatic endpoint certificate recreation
  ansible.builtin.shell:
    cmd: oc -n ibm-common-services patch managementingress default --type merge --patch '{"spec":{"ignoreRouteCert":true}}'
  when: ics_ext_ingress == 'Y'

- name: Wait for endpoint configuration change
  ansible.builtin.shell:
    cmd: "oc logs `oc get pods -n ibm-common-services | grep ibm-management-ingress-operator|awk '{print $1}'` -n ibm-common-services|grep 'IgnoreRouteCert is true'|wc -l"
  register: ics_pod_status
  until: "ics_pods_status.stdout != \"1\""
  retries: 10
  delay: 20
  when: ics_ext_ingress == 'Y'

- name: Change endpoint cert
  ansible.builtin.shell:
    cmd: "{{ item }}"
  with_items:
    - "oc -n ibm-common-services delete certificates.v1alpha1.certmanager.k8s.io route-cert"
    - "oc -n ibm-common-services delete secret route-tls-secret"
    - "oc -n ibm-common-services create secret generic route-tls-secret --from-file=ca.crt={{ ics_ca }}  --from-file=tls.crt={{ ics_cert }}  --from-file=tls.key={{ ics_key }}"
    - "oc -n ibm-common-services delete secret ibmcloud-cluster-ca-cert"
    - "oc -n ibm-common-services delete pod -l app=auth-idp"
  when: ics_ext_ingress == 'Y'

- name: Wait for certificate changes
  ansible.builtin.pause:
    minutes: 3
  when: ics_ext_ingress == 'Y'

- name: Wait for successful cert replacement
  ansible.builtin.shell:
    cmd: "oc get pods --no-headers -n ibm-common-services|grep -v Completed|grep -v Running|wc -l"
  register: ics_pods_status
  until: "ics_pods_status.stdout == \"0\""
  retries: 50
  delay: 20
  when: ics_ext_ingress == 'Y'

