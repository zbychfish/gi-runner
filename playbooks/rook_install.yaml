- name: Set digests for images in order
  ansible.builtin.shell:
    cmd: "IFS=',' read -r -a rook_v_oper <<< `cat {{ temp_dir }}/rook/rook_images_sha|grep {{ item }}`;echo \"`echo ${rook_v_oper[1]}|awk -F '/' '{print $NF}'|awk -F':' '{print $1}'`@${rook_v_oper[2]}\""
  register: rook_digests
  with_items:
    - ROOK_CEPH_OPER
    - ROOK_CEPH_IMAGE
    - ROOK_CSI_CEPH_IMAGE
    - ROOK_CSI_REGISTRAR_IMAGE
    - ROOK_CSI_RESIZER_IMAGE
    - ROOK_CSI_PROVISIONER_IMAGE
    - ROOK_CSI_SNAPSHOTTER_IMAGE
    - ROOK_CSI_ATTACHER_IMAGE
    - CSI_VOLUME_REPLICATION_IMAGE
  when: internet_type == 'A'

- name: Set rook-registry URL
  ansible.builtin.set_fact:
    rook_registry: "{{ 'quay.io/ceph/ceph:'+rook_ceph_version if internet_type != 'A' else 'registry.'+domain+':5000/rook/ceph:'+rook_ceph_version }}"
    rook_ceph_image: "{{ 'ceph:'+rook_ceph_version if internet_type != 'A' else rook_digests.results[1].stdout }}"

- name: Label rook storage nodes for dedicated node space
  ansible.builtin.shell:
    cmd: "oc label node {{ item }}.{{ domain }} role=storage-node --overwrite=true;oc label node {{ item }}.{{ domain }} storage=rook --overwrite=true"
  with_items: "{{ rook_dedicated_nodes|list }}"
  when: rook_dedicated_nodes|length > 2

- name: Configure rook-ceph CRD's
  ansible.builtin.shell:
    cmd: "oc apply -f ../scripts/rook-latest-crds.yaml"

- name: Configure common rook settings
  ansible.builtin.shell:
    cmd: "oc apply -f ../scripts/rook-latest-common.yaml"

- name: Setup rook-ceph cluster file
  ansible.builtin.template:
    src: "rook-latest-cluster.j2"
    dest: "{{ temp_dir }}/rook/rook-cluster.yaml"
  vars:
    multiple_per_node: "true"

- name: Setup rook toolbox file
  ansible.builtin.template:
    src: "{{ 'rook-toolbox.j2' if internet_type != 'A' else 'rook-toolbox-offline.j2' }}"
    dest: "{{ temp_dir }}/rook/rook-toolbox.yaml"

- name: Setup rook-ceph-rbd-sc file
  ansible.builtin.template:
    src: "rook-storage_class_rbd.j2"
    dest: "{{ temp_dir }}/rook/rook-storage_class_rbd.yaml"
  vars:
    replica_size: "2"
    requires_replica: "true"

- name: Deploy rook toolbox
  ansible.builtin.shell:
    cmd: "oc apply -f {{ temp_dir }}/rook/rook-toolbox.yaml"

- name: Deploy rook operator
  ansible.builtin.shell:
    cmd: "{{ item }}"
  loop:
    - "oc apply -f {{ temp_dir }}/rook/rook-latest-operator.yaml"
    - "oc apply -f ../scripts/rook-latest-filesystem.yaml"

- name: Wait for Rook operator
  ansible.builtin.shell:
    cmd: "oc get pods -n rook-ceph --selector app=rook-ceph-operator --no-headers -o custom-columns=STATUS:.status.phase|grep -v Running|wc -l"
  register: rook_operator_status
  until: "rook_operator_status.stdout == \"0\""
  retries: 30
  delay: 10

- meta: end_play

- name: Deploy rook-ceph cluster
  ansible.builtin.shell:
    cmd: "{{ item.cmd }}"
  with_items:
    - { cmd: "oc apply -f {{ temp_dir }}/rook/'rook-cluster.yaml'" }

- name: Wait for correct Rook Ceph cluster deployment
  ansible.builtin.shell:
    cmd: "oc get cephcluster -n rook-ceph --no-headers -o custom-columns=HEALTH:.status.ceph.health"
  register: ceph_installation_status
  until: "ceph_installation_status.stdout == \"HEALTH_OK\" or ceph_installation_status.stdout == \"HEALTH_WARN\""
  retries: 60
  delay: 15

- name: Configure storage classes
  ansible.builtin.shell:
    cmd: "{{ item.cmd }}"
  with_items:
    - { cmd: "oc apply -f {{ temp_dir }}/rook/rook-storage_class_rbd.yaml" }
    - { cmd: "oc apply -f ../scripts/rook-storage_class_cephfs.yaml" }
    - { cmd: "oc patch storageclass rook-ceph-block -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'" }

