- name: Set registry for manifests 1
  ansible.builtin.command:
    cmd: "sed -i 's/-.*:5000/- registry.{{ domain }}:5000/g' {{ temp_dir }}/coreos/{{ item }}"
  with_items:
    - imageContentSourcePolicy.yaml
  when: internet_type == 'A'

- name: Set registry for manifests 2
  ansible.builtin.command:
    cmd: "sed -i 's/image:.*:5000/image: registry.{{ domain }}:5000/g' {{ temp_dir }}/coreos/{{ item }}"
  with_items:
    - catalogSource-redhat-operator-index.yaml
  when: internet_type == 'A'

- name: Set RH operators catalog and OLM image content source policy"
  ansible.builtin.command:
    cmd: "oc apply -f {{ temp_dir }}/coreos/{{ item }}"
  with_items:
    - imageContentSourcePolicy.yaml
    - catalogSource-redhat-operator-index.yaml
  when: internet_type == 'A'

- name: Configure rook-ceph imagecontentsourcepolicy files
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "rook_icsp.j2", dest: "{{ temp_dir }}/rook/rook_icsp.yaml" }
  when: internet_type == 'A' and storage_type == 'R'

- name: Configure imageContentSourcePolicy for rook-ceph
  ansible.builtin.shell:
    cmd: "oc apply -f {{ temp_dir }}/rook/{{ item }}"
  with_items:
    - rook_icsp.yaml
  when: internet_type == 'A' and storage_type == 'R'

- name: Configure openldap imagecontentsourcepolicy files
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "openldap_icsp.j2", dest: "{{ temp_dir }}/adds/openldap_icsp.yaml" }
  when: internet_type == 'A' and install_ldap == 'Y'

- name: Apply imageContentSourcePolicy for openldap
  ansible.builtin.shell:
    cmd: "oc apply -f {{ temp_dir }}/adds/{{ item }}"
  with_items:
    - openldap_icsp.yaml
  when: internet_type == 'A' and install_ldap == 'Y'

- name: Configure nfs-provisioner imagecontentsourcepolicy files
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "nfs_provisioner_icsp.j2", dest: "{{ temp_dir }}/adds/nfs_provisioner_icsp.yaml" }
  when: internet_type == 'A' and gi_nfs_backup == 'Y'

- name: Apply imageContentSourcePolicy for nfs-provisioner
  ansible.builtin.shell:
    cmd: "oc apply -f {{ temp_dir }}/adds/{{ item }}"
  with_items:
    - nfs_provisioner_icsp.yaml
  when: internet_type == 'A' and gi_nfs_backup == 'Y'

- name: Wait - cluster stabilization
  ansible.builtin.pause:
    minutes: 5
  when: internet_type == 'A'

- name: Check cluster nodes health after Content Source Policy change
  ansible.builtin.shell: ../scripts/check_cluster_health_operators.sh
  register: cluster_health_operators
  until: cluster_health_operators.stdout == "0"
  retries: 100
  delay: 30
  when: internet_type == 'A'

- name: Wait for cluster operators after mirrored operator images setup (can take 20-40 minutes)
  ansible.builtin.shell:
      cmd: "oc get co --no-headers|awk '{ print $3$4$5 }'|grep -v TrueFalseFalse|wc -l"
  register: co_status
  until: "co_status.stdout == \"0\""
  retries: 150
  delay: 30
  when: internet_type == 'A'

