- name: Save portable repo credentials
  shell:
    cmd: "cloudctl case launch --case {{ temp_dir }}/{{ offline_inventory }}/{{ ics_manifest_dir }}/ibm-guardium-insights/ --inventory {{ gi_case_inventory_setup }} --action configure-creds-airgap --namespace {{ gi_namespace }} --tolerance 1 --args \"--registry registry.{{ domain }}:5000 --user {{ repo_user }} --pass {{ repo_user_password }}\""
  when: internet_type == 'A' and false

- name: GI preinstall task - offline
  shell:
    cmd: "IBMPAK_HOME={{ temp_dir }}/gi_arch IBMPAK_LAUNCH_SKIP_PREREQ_CHECK=true oc ibm-pak launch ibm-guardium-insights --version {{ gi_case_version }} --inventory {{ gi_case_inventory_setup }} --action preInstall --namespace {{ gi_namespace }} --tolerance 1 --args \"-n {{ gi_namespace }} -h {{ db2_nodes_list }} -l true{{ add_options1 }}{{ add_options2 }}\""
  when: internet_type == 'A'

- name: Install GI catalog in air-gapped
  shell:
    cmd: "IBMPAK_HOME={{ temp_dir }}/gi_arch IBMPAK_LAUNCH_SKIP_PREREQ_CHECK=true oc ibm-pak launch ibm-guardium-insights --version {{ gi_case_version }} --inventory {{ gi_case_inventory_setup }} --action installCatalog --namespace openshift-marketplace --tolerance 1 --args \"--inputDir {{ temp_dir }}/gi_arch/.ibm-pak/data/cases/ibm-guardium-insights/{{ gi_case_version }}\""
  when: internet_type == 'A'

- name: Install GI operators in air-gapped env
  shell:
    cmd: "IBMPAK_HOME={{ temp_dir }}/gi_arch IBMPAK_LAUNCH_SKIP_PREREQ_CHECK=true oc ibm-pak launch ibm-guardium-insights --version {{ gi_case_version }} --inventory {{ gi_case_inventory_setup }} --action installOperator --namespace {{ gi_namespace }} --tolerance 1 --args \"--registry registry.{{ domain }} --user {{ repo_user }} --pass {{ repo_user_password }} --secret ibm-entitlement-key --inputDir {{ temp_dir }}/gi_arch/.ibm-pak/data/cases/ibm-guardium-insights/{{ gi_case_version }}\""
  when: internet_type == 'A'

- name: Get ssh service node port
  shell:
    cmd: "oc get services -n {{ gi_namespace }} {{ gi_namespace }}-ssh-service -o json|jq .spec.ports[0].nodePort"
  register: ssh_node_port

- name: Open ssh-service port on bastion
  firewalld:
    port: "{{ item.port }}/{{ item.type }}"
    permanent: yes
    immediate: yes
    state: enabled
  with_items:
    - { port: "{{ ssh_node_port.stdout }}", type: "tcp" }

- name: Create HA Proxy config file with ssh-service
  template:
    src: haproxy_with_ssh.j2
    dest: /etc/haproxy/haproxy.cfg.ssh
  vars:
    masters: "{{ master_name|zip(master_ip)|list }}"
    nodes: "{{ worker_name|default([])+ocs_name|default([]) }}"
    ips: "{{ worker_ip|default([])+ocs_ip|default([]) }}"
    workers: "{{ nodes|zip(ips)|list }}"
  when: is_master_only == 'N'

- name: Create HA Proxy config file with ssh-service (no dedicated workers)
  template:
    src: haproxy_with_ssh_masters_only.j2
    dest: /etc/haproxy/haproxy.cfg.ssh
  vars:
    masters: "{{ master_name|zip(master_ip)|list }}"
  when: is_master_only == 'Y'

- name: Modify HA Proxy config file
  shell:
    cmd: cat /etc/haproxy/haproxy.cfg.ssh >> /etc/haproxy/haproxy.cfg

- name: Restart HA Proxy
  service:
    name: haproxy
    state: restarted

- name: Set script for DB2 parallelism
  template:
    src: "{{ item }}.j2"
    dest: "../scripts/{{ item }}.sh"
  with_items:
    - db2_parallelism
    - db2_get_tenant

- name: Setup DB2 parameters for parallelism
  shell:
    cmd: bash ../scripts/db2_parallelism.sh

