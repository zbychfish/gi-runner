- name: Link python3 to python name
  file:
    src: /usr/bin/python3
    dest: /usr/bin/python
    state: link

- name: Label GI nodes
  shell:
    cmd: "oc label node {{ item }}.{{ domain }} gi_role=yes --overwrite=true"
  with_items: "{{ gi_dedicated_nodes|list }}"
  when: gi_dedicated_nodes|length > 2

- name: Create GI namespace with node selector
  shell:
    cmd: "{{ item }}"
  with_items:
    - "oc create namespace  {{ gi_namespace }} || echo 'Namespace exists'"
    - "oc patch namespace {{ gi_namespace }} -p '{\"metadata\":{\"annotations\": {\"scheduler.alpha.kubernetes.io/node-selector\": \"gi_role=yes\"}}}'"
  when: gi_dedicated_nodes|length > 2

- name: Create GI namespace
  shell:
    cmd: "oc create namespace {{ gi_namespace }}|| echo 'Namespace exists'"

- name: GI download case file
  shell:
    cmd: "oc ibm-pak get ibm-guardium-insights --version {{ gi_case_version }}"
  when: internet_type != 'A'

- name: Get OpenSSL version on bastion
  shell:
    cmd: openssl version
  register: openssl_version
  when: false

- name: gunzip case file
  shell:
    cmd: "cd {{ temp_dir }}/{{ offline_inventory }}/{{ ics_manifest_dir }};gunzip {{ gi_case }}"
  ignore_errors: yes
  when: false

- name: Unpack case file
  shell:
    cmd: "tar xf {{ temp_dir }}/{{ offline_inventory }}/{{ ics_manifest_dir }}/{{ gi_case|splitext|first }}.tar -C {{ temp_dir }}/{{ offline_inventory }}/{{ ics_manifest_dir }}"
  when: false

- name: Modify prereqs for OpenSSL
  lineinfile:
    path: "{{ temp_dir }}/{{ offline_inventory }}/{{ ics_manifest_dir }}/ibm-guardium-insights/prereqs.yaml"
    regexp: '.*OpenSSL 1.1.1.*'
    line: '        versionRegex: "OpenSSL 1.1.1*|OpenSSL 3.*"'
  when: false and openssl_version.stdout|regex_search("^OpenSSL 3.*$") and gi_version_index|int < gi_31_32_index

- name: Save portable repo credentials
  shell:
    cmd: "cloudctl case launch --case {{ temp_dir }}/{{ offline_inventory }}/{{ ics_manifest_dir }}/ibm-guardium-insights/ --inventory {{ gi_case_inventory_setup }} --action configure-creds-airgap --namespace {{ gi_namespace }} --tolerance 1 --args \"--registry registry.{{ domain }}:5000 --user {{ repo_user }} --pass {{ repo_user_password }}\""
  when: internet_type == 'A'

- name: GI preinstall task
  shell:
    cmd: "IBMPAK_LAUNCH_SKIP_PREREQ_CHECK=true oc ibm-pak launch ibm-guardium-insights --version {{ gi_case_version }} --inventory {{ gi_case_inventory_setup }} --action preInstall --namespace {{ gi_namespace }} --tolerance 1 --args \"-n {{ gi_namespace }} -h {{ db2_nodes_list }} -l true{{ add_options1 }}{{ add_options2 }}\""

- name: Prepare case files for ICS
  ansible.builtin.get_url:
    url: "{{ item }}"
    dest: "{{ temp_dir }}/gi_arch/cases"
    use_proxy: "{{ 'yes' if internet_type == 'P' else 'no' }}"
  with_items:
    - "https://github.com/IBM/cloud-pak/raw/master/repo/case/ibm-cp-common-services/{{ ics_cases[ics_version_hint|int] }}/ibm-cp-common-services-{{ ics_cases[ics_version_hint|int] }}.tgz"
  when: false and internet_type != 'A' and gi_version_index|int >= gi_31_32_index

- name: Copy DB2 case file to cases directory
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ temp_dir }}/gi_arch/cases"
  with_fileglob:
    - "{{ temp_dir }}/{{ offline_inventory }}/{{ ics_manifest_dir }}/ibm-db2uoperator-*.tgz"
  when: false and gi_version_index|int >= gi_31_32_index

- name: Install GI catalog in air-gapped
  shell:
    cmd: "cloudctl case launch --case {{ temp_dir }}/{{ offline_inventory }}/{{ ics_manifest_dir }}/ibm-guardium-insights/ --inventory {{ gi_case_inventory_setup }} --action install-catalog --namespace openshift-marketplace --tolerance 1 --args \"--registry registry.{{ domain }}:5000 --inputDir {{ temp_dir }}/{{ offline_inventory }}/{{ ics_manifest_dir }}\""
  when: internet_type == 'A'

- name: Install GI catalog online
  shell:
    cmd: "oc ibm-pak launch ibm-guardium-insights --version {{ gi_case_version }} --inventory {{ gi_case_inventory_setup }} --action installCatalog --namespace openshift-marketplace --tolerance 1 --args \"--inputDir /root/.ibm-pak/data/cases/ibm-guardium-insights/{{ gi_case_version }}\""
  when: internet_type != 'A'

- name: Wait for GI catalog (part1)
  shell:
    cmd: "oc get pods -n openshift-marketplace|grep ibm-db2uoperator-catalog|grep 1/1|grep Running|wc -l"
  register: db2_catalog_status
  until: "db2_catalog_status.stdout == \"1\""
  retries: 30
  delay: 10

- name: Wait for GI catalog (part2)
  shell:
    cmd: "oc get pods -n openshift-marketplace|grep ibm-cloud-databases-redis-operator-catalog|grep 1/1|grep Running|wc -l"
  register: redis_catalog_status
  until: "redis_catalog_status.stdout == \"1\""
  retries: 30
  delay: 10

- name: Install GI operators in air-gapped env
  shell:
    cmd: "cloudctl case launch --case {{ temp_dir }}/{{ offline_inventory }}/{{ ics_manifest_dir }}/ibm-guardium-insights/ --inventory {{ gi_case_inventory_setup }} --action install-operator --namespace {{ gi_namespace }} --tolerance 1 --args \"--registry registry.{{ domain }}:5000 --user {{ repo_user }} --pass {{ repo_user_password }} --secret ibm-entitlement-key\""
  when: false and internet_type == 'A'

- name: Install GI operators online
  shell:
    cmd: "oc ibm-pak launch ibm-guardium-insights --version {{ gi_case_version }} --inventory {{ gi_case_inventory_setup }} --action installOperator --namespace {{ gi_namespace }} --tolerance 1 --args \"--registry cp.icr.io --user cp --pass {{ ibm_secret }} --secret ibm-entitlement-key --inputDir /root/.ibm-pak/data/cases/ibm-guardium-insights/{{ gi_case_version }}\""
  when: internet_type != 'A'

- name: Wait for GI operators
  shell:
    cmd: "oc get pods -n {{ gi_namespace }}|grep {{ item.operator_pattern }}|grep 1/1|grep Running|wc -l"
  register: operator_status
  until: "operator_status.stdout == \"1\""
  retries: 30
  delay: 10
  with_items:
    - { operator_pattern: "db2u-operator-manager" }
    - { operator_pattern: "ibm-cloud-databases-redis-operator" }
    - { operator_pattern: "mongodb-kubernetes-operator" }
    - { operator_pattern: "guardiuminsights-controller-manager" }

- meta: end_play

- name: Generate GI deployment file
  template:
    src: "gi.j2"
    dest: "{{ temp_dir }}/gi_arch/gi.yaml"

- name: Deploy GI
  shell:
    cmd: "oc apply -f {{ temp_dir }}/gi_arch/gi.yaml"

- name: Wait for successful GI deployment (takes 20-60 minutes)
  shell:
    cmd: "oc get guardiuminsights -n {{ gi_namespace }} -o json|jq .items[0].status.versions.reconciled|tr -d '\"'"
  register: gi_deployment_status
  until: gi_deployment_status.stdout == gi_version
  retries: 100
  delay: 60

- name: Enable STAP streaming and Outliers features for 3.2+
  block:
  - name: Generate basic token
    shell:
      cmd: "echo -n admin:{{ ics_admin_password }} | base64"
    register: basic_token

  - name: Set features
    uri:
      url: "https://insights.apps.{{ domain }}/api/v3/feature_flags/{{ item }}"
      method: PATCH
      headers:
        Authorization: "Basic {{ basic_token.stdout }}"
      body_format: json
      body: '{"value": true}"}'
      validate_certs: no
      use_proxy: no
    with_items:
    - STAP_STREAMING
    - OUTLIERS_ENGINE
    - GDP_OUTLIER_SUMMARIZED
  when: gi_version_index|int >= gi_31_32_index and stap_supp == 'Y'

- name: Set Outliers detection in Demo mode
  block:
  - name: Get tenant
    shell:
      cmd: "../scripts/db2_get_tenant.sh 2>&- | tail -n1 | xargs"
    register: tenant
    when: false

  - name: Get JWT token
    uri:
      url: "https://insights.apps.{{ domain }}/api/v1/authorization"
      method: POST
      headers:
        Authorization: "Basic {{ basic_token.stdout }}"
      body_format: json
      body: '{"IsRenew": false}'
      validate_certs: no
      use_proxy: no
    register: jwt

  - debug:
      msg: "{{ jwt.json.JWT }}"

  - name: Get Outliers settings
    uri:
      url: "https://insights.apps.{{ domain }}/api/v1/configs"
      method: GET
      headers:
        Authorization: "{{ jwt.json.JWT }}"
      validate_certs: no
      use_proxy: no
    register: gi_configs

  - debug:
      msg: "{{ gi_configs.json|community.general.json_query(j_query) }}"
    vars:
      j_query: "Configs[?Name=='Outliers']._id"
    register: outliers_id

  - name: Set Outliers in demo mode
    uri:
      url: "https://insights.apps.{{ domain }}/api/v1/configs/{{ outliers_id.msg[0] }}"
      method: PATCH
      headers:
        Authorization: "{{ jwt.json.JWT }}"
      body_format: json
      body: '{"Name": "","_id": "{{ outliers_id.msg[0] }}","Options": {"demoMode": "1","minDaysForAlerts": "0","intervalAlertsThreshold": "0.5","minNumIntervalsForMessageScorers": "2","minNumIntervalsForIntervalScorers": "2","alertsPerDay": "100"}}'
      validate_certs: no
      use_proxy: no
    vars:
      j_query: "Configs[?Name=='Outliers']._id"
  when: gi_version_index|int >= gi_31_32_index and outliers_demo == 'Y'

- name: Get ssh service node port
  shell:
    cmd: "oc get services -n {{ gi_namespace }} {{ gi_namespace }}-ssh-service -o json|jq .spec.ports[0].nodePort"
  register: ssh_node_port

- name: Open ssh-service port on bastion
  firewalld:
    port: "{{ item.port }}/{{ item.type }}"
    permanent: yes
    immediate: yes
    state: enabled
  with_items:
    - { port: "{{ ssh_node_port.stdout }}", type: "tcp" }

- name: Create HA Proxy config file with ssh-service
  template:
    src: haproxy_with_ssh.j2
    dest: /etc/haproxy/haproxy.cfg.ssh
  vars:
    masters: "{{ master_name|zip(master_ip)|list }}"
    nodes: "{{ worker_name|default([])+ocs_name|default([]) }}"
    ips: "{{ worker_ip|default([])+ocs_ip|default([]) }}"
    workers: "{{ nodes|zip(ips)|list }}"
  when: is_master_only == 'N'

- name: Create HA Proxy config file with ssh-service (no dedicated workers)
  template:
    src: haproxy_with_ssh_masters_only.j2
    dest: /etc/haproxy/haproxy.cfg.ssh
  vars:
    masters: "{{ master_name|zip(master_ip)|list }}"
  when: is_master_only == 'Y'

- name: Modify HA Proxy config file
  shell:
    cmd: cat /etc/haproxy/haproxy.cfg.ssh >> /etc/haproxy/haproxy.cfg

- name: Restart HA Proxy
  service:
    name: haproxy
    state: restarted

- name: Set script for DB2 parallelism
  template:
    src: "{{ item }}.j2"
    dest: "../scripts/{{ item }}.sh"
  with_items:
    - db2_parallelism
    - db2_get_tenant

- name: Setup DB2 parameters for parallelism
  shell:
    cmd: bash ../scripts/db2_parallelism.sh
