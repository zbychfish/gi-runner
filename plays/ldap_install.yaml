- name: Add openldap namespace
  shell:
    cmd: oc create namespace openldap || echo "Namespace exists"

- name: Create password list
  shell:
    cmd: "USER_PWD_LIST=\"\";IFS=',' read -r -a USER_ARR <<< {{ ldap_users_raw }};for user in ${USER_ARR[@]}; do USER_PWD_LIST+=\"{{ ldap_password }},\";done;echo $USER_PWD_LIST"
  register: ldap_user_pwds

- name: Add openldap secret
  shell:
    cmd: "oc create secret generic openldap --from-literal=adminpassword={{ ldap_password }} --from-literal=users={{ ldap_users_raw }} --from-literal=passwords={{ ldap_user_pwds.stdout }} -n openldap"
  register: result
  failed_when: result.rc != 0 and "already exists" not in result.stderr

- name: Configure openldap deployment plan
  template:
    src: "openldap_depl.j2"
    dest: "{{ temp_dir }}/yamls/openldap_depl.yaml"
  vars:
    ldap_version: "{{ ':latest' if internet_type != 'A' }}"

- name: Deploy bitnami.openldap
  shell:
    cmd: "oc create -f {{ item }} -n openldap"
  register: result
  with_items:
    - "{{ temp_dir }}/yamls/openldap_depl.yaml"
    - ../funcs/yamls/openldap_svc.yaml
  failed_when: result.rc != 0 and "already exists" not in result.stderr and "already allocated" not in result.stderr

- name: Wait for openldap successful deployment
  shell:
    cmd: "oc get pods -n openldap|grep 1/1|wc -l"
  register: openldap_status
  until: "openldap_status.stdout == \"1\""
  retries: 20
  delay: 10

- name: Add route for openldap
  shell:
    cmd: "oc expose service/openldap -n openldap"
  register: result
  failed_when: result.rc != 0 and "already exists" not in result.stderr

- name: Get openldap route name
  shell:
    cmd: "oc get routes -n openldap -o json|jq .items[0].spec.host|tr -d '\"'"
  register: openldap_route

- name: Encode Base64 ldap admin password
  shell:
    cmd: "echo -n {{ ldap_password }} | base64"
  register: ldap_password_base64

- name: Login to ICS
  shell:
    cmd: "cloudctl login -a https://cp-console.apps.{{ ocp_domain }} --skip-ssl-validation -u admin -p '{{ cpfs_admin_password }}' -n ibm-common-services"
  when: install_cpfs == 'Y'

- name: Extract ICS Access Token
  shell:
    cmd: "cloudctl tokens|grep Access|awk -F ':' '{ print $2 }'|awk -F ' ' '{ print $2}'"
  register: access_token
  when: install_cpfs == 'Y' or install_cp4s == 'Y'

- name: Set LDAP URL for container
  set_fact:
    ldap_url: "{{ openldap_route.stdout }}:1389"
