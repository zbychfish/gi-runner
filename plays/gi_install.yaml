- name: Link python3 to python name
  file:
    src: /usr/bin/python3
    dest: /usr/bin/python
    state: link

- name: Label GI nodes
  shell:
    cmd: "oc label node {{ item }}.{{ ocp_domain }} role=gi --overwrite=true"
  with_items: "{{ gi_dedicated_nodes|list }}"
  when: gi_dedicated_nodes|length > 2

- name: Create GI namespace
  shell:
    cmd: "oc create namespace {{ gi_namespace }}|| echo 'Namespace exists'"

- name: Create GI namespace with node selector
  shell:
    cmd: "{{ item }}"
  with_items:
    - "oc patch namespace {{ gi_namespace }} -p '{\"metadata\":{\"annotations\": {\"scheduler.alpha.kubernetes.io/node-selector\": \"role=gi\"}}}'"
  when: gi_dedicated_nodes|length > 2

- name: GI download case file
  shell:
    cmd: "IBMPAK_HOME={{ temp_dir }} oc ibm-pak get {{ gi_case_name }} --version {{ gi_case_version }}"
  when: internet_type != 'A'

- name: GI preinstall task
  shell:
    cmd: "IBMPAK_HOME={{ temp_dir }} IBMPAK_LAUNCH_SKIP_PREREQ_CHECK=true oc ibm-pak launch {{ gi_case_name }} --version {{ gi_case_version }} --inventory {{ gi_case_inventory_setup }} --action preInstall --namespace {{ gi_namespace }} --tolerance 1 --args \"-n {{ gi_namespace }} -h {{ db2_nodes_list }} -l true{{ gi_add_options1 }}{{ gi_add_options2 }}\""
  when: internet_type != 'A'

- name: Install GI catalog
  shell:
    cmd: "IBMPAK_HOME={{ temp_dir }} IBMPAK_LAUNCH_SKIP_PREREQ_CHECK=true oc ibm-pak launch {{ gi_case_name }} --version {{ gi_case_version }} --inventory {{ gi_case_inventory_setup }} --action installCatalog --namespace openshift-marketplace --tolerance 1 --args \"--inputDir {{ temp_dir }}/.ibm-pak/data/cases/{{ gi_case_name }}/{{ gi_case_version }}\""
  when: internet_type != 'A'

- name: Wait for GI catalog (part1)
  shell:
    cmd: "oc get pods -n openshift-marketplace|grep ibm-db2uoperator-catalog|grep 1/1|grep Running|wc -l"
  register: db2_catalog_status
  until: "db2_catalog_status.stdout == \"1\""
  retries: 30
  delay: 10

- name: Wait for GI catalog (part2)
  shell:
    cmd: "oc get pods -n openshift-marketplace|grep ibm-cloud-databases-redis-operator-catalog|grep 1/1|grep Running|wc -l"
  register: redis_catalog_status
  until: "redis_catalog_status.stdout == \"1\""
  retries: 30
  delay: 10

- name: Install GI operators online
  shell:
    cmd: "IBMPAK_HOME={{ temp_dir }} IBMPAK_LAUNCH_SKIP_PREREQ_CHECK=true oc ibm-pak launch {{ gi_case_name }} --version {{ gi_case_version }} --inventory {{ gi_case_inventory_setup }} --action installOperator --namespace {{ gi_namespace }} --tolerance 1 --args \"--registry cp.icr.io --user cp --pass {{ ibm_secret }} --secret ibm-entitlement-key --inputDir {{ temp_dir }}/.ibm-pak/data/cases/{{ gi_case_name }}/{{ gi_case_version }}\""
  when: internet_type != 'A'

- name: Wait for GI operators
  shell:
    cmd: "oc get pods -n {{ gi_namespace }}|grep {{ item }}|grep 1/1|grep Running|wc -l"
  register: operator_status
  until: "operator_status.stdout|int > 0"
  retries: 30
  delay: 10
  with_items:
    - "db2u-operator-manager"
    - "ibm-cloud-databases-redis-operator"
    - "mongodb-kubernetes-operator"
    - "{{ 'ibm-guardium-insights-operator' if gi_version_index|int > 0 else 'guardiuminsights-controller-manager' }}" # operator name changed in 3.3
    - "{{ 'noobaa-operator' if gi_version_index|int > 0 else 'operator' }}" # new operator from 3.3 release

- name: Generate GI deployment file
  template:
    src: gi.j2
    dest: "{{ temp_dir }}/yamls/gi.yaml"

- name: Deploy GI
  shell:
    cmd: "oc apply -f {{ temp_dir }}/yamls/gi.yaml"

- name: Wait for DB2 deployment
  shell:
    cmd: "oc get pod -n {{ gi_namespace }} | grep db2-ready | grep Completed | wc -l"
  register: db2_deployment_status
  until: db2_deployment_status.stdout|int == 1
  retries: 150
  delay: 10

- name: Patch deployment (BUG in 3.2.10)
  shell:
    cmd: "oc patch guardiuminsights {{ gi_namespace }} -n {{ gi_namespace }} --type json -p '[{\"op\": \"replace\", \"path\": \"/spec/guardiumInsightsGlobal/deploySettings/ensureDb2InstallPlacement\", \"value\": false}]'"

- name: Wait for successful GI deployment (takes 20-60 minutes)
  shell:
    cmd: "oc get guardiuminsights -n {{ gi_namespace }} -o json|jq .items[0].status.versions.reconciled|tr -d '\"'"
  register: gi_deployment_status
  until: gi_deployment_status.stdout == gi_version
  retries: 200
  delay: 10
