- name: Link python3 to python name
  file:
    src: /usr/bin/python3
    dest: /usr/bin/python
    state: link

- name: Label GI nodes
  shell:
    cmd: "oc label node {{ item }}.{{ ocp_domain }} gi_node=yes --overwrite=true"
  with_items: "{{ gi_dedicated_nodes|list }}"
  when: gi_dedicated_nodes|length > 2

- name: Create GI namespace
  shell:
    cmd: "oc create namespace {{ gi_namespace }}|| echo 'Namespace exists'"

- name: Create GI namespace with node selector
  shell:
    cmd: "{{ item }}"
  with_items:
    - "oc patch namespace {{ gi_namespace }} -p '{\"metadata\":{\"annotations\": {\"scheduler.alpha.kubernetes.io/node-selector\": \"gi_node=yes\"}}}'"
  when: gi_dedicated_nodes|length > 2

- name: GI download case file
  shell:
    cmd: "IBMPAK_HOME={{ temp_dir }} oc ibm-pak get {{ gi_case_name }} --version {{ gi_case_version }}"
  when: internet_type != 'A'

- name: GI preinstall task
  shell:
    cmd: "IBMPAK_HOME={{ temp_dir }} IBMPAK_LAUNCH_SKIP_PREREQ_CHECK=true oc ibm-pak launch {{ gi_case_name }} --version {{ gi_case_version }} --inventory {{ gi_case_inventory_setup }} --action preInstall --namespace {{ gi_namespace }} --tolerance 1 --args \"-n {{ gi_namespace }} -h {{ db2_nodes_list }} -l true{{ gi_add_options1 }}{{ gi_add_options2 }}\""
  when: internet_type != 'A'

- name: Install GI catalog
  shell:
    cmd: "IBMPAK_HOME={{ temp_dir }} IBMPAK_LAUNCH_SKIP_PREREQ_CHECK=true oc ibm-pak launch {{ gi_case_name }} --version {{ gi_case_version }} --inventory {{ gi_case_inventory_setup }} --action installCatalog --namespace openshift-marketplace --tolerance 1 --args \"--inputDir {{ temp_dir }}/.ibm-pak/data/cases/{{ gi_case_name }}/{{ gi_case_version }}\""
  when: internet_type != 'A'

- name: Wait for GI catalog (part1)
  shell:
    cmd: "oc get pods -n openshift-marketplace|grep ibm-db2uoperator-catalog|grep 1/1|grep Running|wc -l"
  register: db2_catalog_status
  until: "db2_catalog_status.stdout == \"1\""
  retries: 30
  delay: 10

- name: Wait for GI catalog (part2)
  shell:
    cmd: "oc get pods -n openshift-marketplace|grep ibm-cloud-databases-redis-operator-catalog|grep 1/1|grep Running|wc -l"
  register: redis_catalog_status
  until: "redis_catalog_status.stdout == \"1\""
  retries: 30
  delay: 10

- name: Install GI operators online
  shell:
    cmd: "IBMPAK_HOME={{ temp_dir }} IBMPAK_LAUNCH_SKIP_PREREQ_CHECK=true oc ibm-pak launch {{ gi_case_name }} --version {{ gi_case_version }} --inventory {{ gi_case_inventory_setup }} --action installOperator --namespace {{ gi_namespace }} --tolerance 1 --args \"--registry cp.icr.io --user cp --pass {{ ibm_secret }} --secret ibm-entitlement-key --inputDir {{ temp_dir }}/.ibm-pak/data/cases/{{ gi_case_name }}/{{ gi_case_version }}\""
  when: internet_type != 'A'

- name: Wait for GI operators
  shell:
    cmd: "oc get pods -n {{ gi_namespace }}|grep {{ item }}|grep 1/1|grep Running|wc -l"
  register: operator_status
  until: "operator_status.stdout|int > 0"
  retries: 30
  delay: 10
  with_items:
    - "db2u-operator-manager"
    - "ibm-cloud-databases-redis-operator"
    - "mongodb-kubernetes-operator"
    - "{{ 'ibm-guardium-insights-operator' if gi_version_index|int > 0 else 'guardiuminsights-controller-manager' }}" # operator name changed in 3.3
    - "{{ 'noobaa-operator' if gi_version_index|int > 0 else 'operator' }}" # new operator from 3.3 release

- name: Generate GI deployment file
  template:
    src: gi.j2
    dest: "{{ temp_dir }}/yamls/gi.yaml"

- name: Deploy GI
  shell:
    cmd: "oc apply -f {{ temp_dir }}/yamls/gi.yaml"
  when: false

- name: Wait for DB2 deployment
  shell:
    cmd: "oc get pod -n {{ gi_namespace }} | grep db2-ready | grep Completed | wc -l"
  register: db2_deployment_status
  until: db2_deployment_status.stdout|int == 1
  retries: 150
  delay: 10
  when: false

- name: Patch deployment (BUG in 3.2.10)
  shell:
    cmd: "oc patch guardiuminsights {{ gi_namespace }} -n {{ gi_namespace }} --type json -p '[{\"op\": \"replace\", \"path\": \"/spec/guardiumInsightsGlobal/deploySettings/ensureDb2InstallPlacement\", \"value\": false}]'"

- name: Wait for successful GI deployment (takes 20-60 minutes)
  shell:
    cmd: "oc get guardiuminsights -n {{ gi_namespace }} -o json|jq .items[0].status.versions.reconciled|tr -d '\"'"
  register: gi_deployment_status
  until: gi_deployment_status.stdout == gi_version
  retries: 200
  delay: 10

- name: Enable STAP streaming and Outliers features for 3.2.x
  block:
  - name: Generate basic token
    shell:
      cmd: "echo -n admin:{{ cpfs_admin_password }} | base64"
    register: basic_token

  - name: Set outliers feature on
    uri:
      url: "https://insights.apps.{{ ocp_domain }}/api/v3/feature_flags/{{ item }}"
      method: PATCH
      headers:
        Authorization: "Basic {{ basic_token.stdout }}"
      body_format: json
      body: '{"value": true}"}'
      validate_certs: no
      use_proxy: no
    with_items:
    - OUTLIERS_ENGINE
    - GDP_OUTLIER_SUMMARIZED

  - name: Set outliers STAP streaming on
    uri:
      url: "https://insights.apps.{{ ocp_domain }}/api/v3/feature_flags/{{ item }}"
      method: PATCH
      headers:
        Authorization: "Basic {{ basic_token.stdout }}"
      body_format: json
      body: '{"value": true}"}'
      validate_certs: no
      use_proxy: no
    with_items:
    - STAP_STREAMING
    when: stap_supp == 'Y'
  when: gi_version == '3.2.13'

- name: Enable STAP streaming and Outliers features for 3.3
  block:
  - name: Generate basic token
    shell:
      cmd: "echo -n admin:{{ cpfs_admin_password }} | base64"
    register: basic_token

  - name: Get tenant name
    uri:
      url: "https://insights.apps.{{ ocp_domain }}/api/v3/tenants"
      method: GET
      headers:
        Authorization: "Basic {{ basic_token.stdout }}"
      body_format: json
      body: '{"value": true}"}'
      validate_certs: no
      use_proxy: no
    register: tenants

  - name: Set outliers feature on
    uri:
      url: "https://insights.apps.{{ ocp_domain }}/api/v3/feature_flags/overrides"
      method: PUT
      headers:
        Authorization: "Basic {{ basic_token.stdout }}"
      body_format: json
      body:
        feature_flag:
          flag_name: "STAP_STREAMING"
          is_enabled: false
        tenant_id: "{{ tenants.json.Tenants[0].tenant_id }}"
      status_code: [ 200, 401 ] # BUG in API
      validate_certs: no
      use_proxy: no
  when: gi_version != '3.2.13'

- name: Set Outliers detection in Demo mode for 3.2.x
  block:
  - name: Get JWT token
    uri:
      url: "https://insights.apps.{{ ocp_domain }}/api/v1/authorization"
      method: POST
      headers:
        Authorization: "Basic {{ basic_token.stdout }}"
      body_format: json
      body: '{"IsRenew": false}'
      validate_certs: no
      use_proxy: no
    register: jwt

  - name: Get Outliers settings
    uri:
      url: "https://insights.apps.{{ ocp_domain }}/api/v1/configs"
      method: GET
      headers:
        Authorization: "{{ jwt.json.JWT }}"
      validate_certs: no
      use_proxy: no
    register: gi_configs

  - debug:
      msg: "{{ gi_configs.json|community.general.json_query(j_query) }}"
    vars:
      j_query: "Configs[?Name=='Outliers']._id"
    register: outliers_id

  - name: Set Outliers in demo mode
    uri:
      url: "https://insights.apps.{{ ocp_domain }}/api/v1/configs/{{ outliers_id.msg[0] }}"
      method: PATCH
      headers:
        Authorization: "{{ jwt.json.JWT }}"
      body_format: json
      body: '{"Name": "","_id": "{{ outliers_id.msg[0] }}","Options": {"demoMode": "1","minDaysForAlerts": "0","intervalAlertsThreshold": "0.5","minNumIntervalsForMessageScorers": "2","minNumIntervalsForIntervalScorers": "2","alertsPerDay": "100"}}'
      validate_certs: no
      use_proxy: no
    vars:
      j_query: "Configs[?Name=='Outliers']._id"
  when: outliers_demo == 'Y' and gi_version != '3.2.13'

- name: Get ssh service node port
  shell:
    cmd: "oc get services -n {{ gi_namespace }} {{ gi_namespace }}-ssh-service -o json|jq .spec.ports[0].nodePort"
  register: ssh_node_port

- name: Open ssh-service port on bastion
  firewalld:
    port: "{{ item.port }}/{{ item.type }}"
    permanent: yes
    immediate: yes
    state: enabled
  with_items:
    - { port: "{{ ssh_node_port.stdout }}", type: "tcp" }

- name: Check HA proxy with ssh nodeport
  shell:
    cmd: cat /etc/haproxy/haproxy.cfg|grep "frontend ssh"|wc -l
  register: is_ssh_in_haproxy

- name: Create HA Proxy config file with ssh-service
  template:
    src: haproxy_with_ssh.j2
    dest: /etc/haproxy/haproxy.cfg.ssh
  vars:
    masters: "{{ master_name|zip(master_ip)|list }}"
    nodes: "{{ worker_name|default([])+ocs_name|default([]) if is_master_only == 'N' else '' }}"
    ips: "{{ worker_ip|default([])+ocs_ip|default([]) if is_master_only == 'N' else '' }}"
    workers: "{{ nodes|zip(ips)|list if is_master_only == 'N' else '' }}"
    nodes_to_process: "{{ workers if is_master_only == 'N' else masters }}"
  when: is_ssh_in_haproxy.stdout == "0"

- name: Modify HA Proxy config file
  shell:
    cmd: cat /etc/haproxy/haproxy.cfg.ssh >> /etc/haproxy/haproxy.cfg
  when: is_ssh_in_haproxy.stdout == "0"

- name: Restart HA Proxy
  service:
    name: haproxy
    state: restarted

- name: Set script for DB2 parallelism
  template:
    src: "{{ item }}.j2"
    dest: "../{{ gi_temp }}/scripts/{{ item }}.sh"
  with_items:
    - db2_parallelism
  when: gi_version|int == 0

- name: Setup DB2 parameters for parallelism
  shell:
    cmd: "bash ../{{ gi_temp }}/scripts/db2_parallelism.sh"
  when: gi_version|int == 0
