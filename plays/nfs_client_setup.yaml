- name: Create namespace for NFS client and GI
  ansible.builtin.shell:
    cmd: "{{ item }}"
  with_items:
    - oc create namespace nfs-provisioner || echo "Namespace exists"
    - "oc create namespace {{ gi_namespace }} || echo \"Namespace exists\""

- name: Get nfs-provisioner digest
  shell:
    cmd: "cat {{ temp_dir}}/archives/digests.txt|grep nfs-subdir-external-provisioner:v{{ nfs_provisioner_version }}|awk -F ',' '{print $2}'"
  register: nfs_digest
  when: internet_type == 'A'

- name: Set correct tag or digest
  set_fact:
    nfs_version: "{{ ':v'+nfs_provisioner_version if internet_type != 'A' else '@'+nfs_digest.stdout }}"

- name: Set RBAC for NFS client
  ansible.builtin.shell:
    cmd: oc apply -f ../funcs/yamls/nfs_client_rbac.yaml

- name: Set security context for NFS client
  ansible.builtin.shell:
    cmd: oc adm policy add-scc-to-user hostmount-anyuid system:serviceaccount:nfs-provisioner:nfs-client-provisioner

- name: Setup NFS deployment file
  template:
    src: "nfs_client_deployment.j2"
    dest: "{{ temp_dir }}/yamls/nfs_client_deployment.yaml"

- name: Deploy NFS client
  ansible.builtin.shell:
    cmd: "oc apply -f {{ temp_dir }}/yamls/nfs_client_deployment.yaml"

- name: Confirm successful deployment of NFS client
  ansible.builtin.shell:
    cmd: "oc get pods -n nfs-provisioner | grep -e Running -e 1/1 | wc -l"
  register: nfs_client_status
  until: "nfs_client_status.stdout|int == 1"
  retries: 30
  delay: 10

- name: Add NFS client storage class
  ansible.builtin.shell:
    cmd: oc apply -f ../funcs/yamls/nfs_client_sc.yaml

- name: Setup PVC file
  template:
    src: "nfs_backup_pvc.j2"
    dest: "{{ temp_dir }}/yamls/nfs_backup_pvc.yaml"

- name: Deploy NFS backup PVC
  ansible.builtin.shell:
    cmd: "oc apply -f {{ temp_dir }}/yamls/nfs_backup_pvc.yaml"

