- hosts: bastion
  vars:
    internet_type: "{{ lookup('env','GI_INTERNET_ACCESS') }}"
    bas_ip: "{{ lookup('env','GI_BASTION_IP') }}"
    ntp_server: "{{ lookup('env','GI_NTP_SRV') }}"
    ocp_release: "{{ lookup('env','GI_OCP_RELEASE') }}"
    ocp_major_release: "{{ ocp_release.split('.')[:-1]|join('.') }}"
    ocp_minor_release: "{{ ocp_release.split('.')[-1] }}"
    boot_name: "{{ lookup('env','GI_BOOTSTRAP_NAME') }}"
    boot_ip: "{{ lookup('env','GI_BOOTSTRAP_IP') }}"
    boot_mac: "{{ lookup('env','GI_BOOTSTRAP_MAC_ADDRESS') }}"
    master_ip: "{{ lookup('env', 'GI_MASTER_IP').split(',') }}"
    master_mac: "{{ lookup('env', 'GI_MASTER_MAC_ADDRESS').split(',') }}"
    master_name: "{{ lookup('env', 'GI_MASTER_NAME').split(',') }}"
    is_master_only: "{{ lookup('env','GI_MASTER_ONLY') }}"
    is_ocs_tainted: "{{ lookup('env','GI_OCS_TAINTED') }}"
    ocp_domain: "{{ lookup('env','GI_DOMAIN') }}"
    base_domain: "{{ ocp_domain.split('.')[1:] | join('.') }}"
    cluster_domain: "{{ ocp_domain.split('.')[0] }}"
    boot_disk: "{{ lookup('env','GI_BOOT_DEVICE') }}"
    bas_int: "{{ lookup('env','GI_BASTION_INTERFACE') }}"
    bas_name: "{{ lookup('env','GI_BASTION_NAME') }}"
      # net_int: "{{ lookup('env','GI_NETWORK_INTERFACE') }}"
    one_subnet: "{{ lookup('env','GI_ONE_SUBNET') }}"
    dns_forwarder: "{{ lookup('env','GI_DNS_FORWARDER') }}"
    install_gi: "{{ lookup('env','GI_INSTALL_GI') }}"
    cluster_network: "{{ lookup('env','GI_OCP_CIDR') }}"
    cluster_network_subnet:  "{{ lookup('env','GI_OCP_CIDR_MASK') }}"
    ocp_cni: "{{ lookup('env','GI_OCP_CNI') }}"
    ssh_key: "{{ lookup('env','GI_SSH_KEY') }}"
    rhn_secret: "{{ lookup('env','GI_RHN_SECRET') }}"
    ocpadmin: "{{ lookup('env','GI_OCADMIN') }}"
    ocpadmin_password: "{{ lookup('env','GI_OCADMIN_PWD') }}"
    ocp_ext_ingress: "{{ lookup('env','GI_OCP_IN') }}"
    storage_type: "{{ lookup('env','GI_STORAGE_TYPE') }}"
    storage_device: "{{ lookup('env','GI_STORAGE_DEVICE') }}"
    storage_device_size: "{{ lookup('env','GI_STORAGE_DEVICE_SIZE') }}"
    storage_class_rw_many: "{{ 'rook-cephfs' if storage_type == 'R' else 'ocs-storagecluster-cephfs' if storage_type == 'O' else 'px-csi-replicated' }}"
    storage_class_rw_one: "{{ 'rook-ceph-block' if storage_type == 'R' else 'ocs-storagecluster-ceph-rbd' if storage_type == 'O' else 'px-csi-replicated' }}"
    install_cpfs: "{{ lookup('env','GI_ICS') }}"

  vars_files:
    - constants.yaml

  tasks:
    - name: Check standard configuration parameters
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_INTERNET_ACCESS", value: "{{ internet_type }}" }
        - { name: "GI_BASTION_IP", value: "{{ bas_ip }}" }
        - { name: "GI_NTP_SRV", value: "{{ ntp_server }}" }
        - { name: "GI_OCP_RELEASE", value: "{{ ocp_release }}" }
        - { name: "GI_BOOTSTRAP_NAME", value: "{{ boot_name }}" }
        - { name: "GI_BOOTSTRAP_IP", value: "{{ boot_ip }}" }
        - { name: "GI_BOOTSTRAP_MAC_ADDRESS", value: "{{ boot_mac }}" }
        - { name: "GI_MASTER_IP", value: "{{ master_ip }}" }
        - { name: "GI_MASTER_MAC_ADDRESS", value: "{{ master_mac }}" }
        - { name: "GI_MASTER_NAME", value: "{{ master_name }}" }
        - { name: "GI_MASTER_ONLY", value: "{{ is_master_only }}" }
        - { name: "GI_OCS_TAINTED", value: "{{ is_ocs_tainted }}" }
        - { name: "GI_DOMAIN", value: "{{ ocp_domain }}" }
        - { name: "GI_BOOT_DEVICE", value: "{{ boot_disk }}" }
        - { name: "GI_BASTION_INTERFACE", value: "{{ bas_int }}" }
        - { name: "GI_BASTION_NAME", value: "{{ bas_name }}" }
          # - { name: "GI_NETWORK_INTERFACE", value: "{{ net_int }}" }
        - { name: "GI_ONE_SUBNET", value: "{{ one_subnet }}" }
        - { name: "GI_DNS_FORWARDER", value: "{{ dns_forwarder }}" }
        - { name: "GI_INSTALL_GI", value: "{{ install_gi }}" }
        - { name: "GI_OCP_CIDR", value: "{{ cluster_network }}" }
        - { name: "GI_OCP_CIDR_MASK", value: "{{ cluster_network_subnet }}" }
        - { name: "GI_OCP_CNI", value: "{{ ocp_cni }}" }
        - { name: "GI_SSH_KEY", value: "{{ ssh_key }}" }
        - { name: "GI_RHN_SECRET", value: "{{ rhn_secret }}" }
        - { name: "GI_OCADMIN", value: "{{ ocpadmin }}" }
        - { name: "GI_OCADMIN_PWD", value: "{{ ocpadmin_password }}" }
        - { name: "GI_OCP_IN", value: "{{ ocp_ext_ingress }}" }
        - { name: "GI_STORAGE_TYPE", value: "{{ storage_type }}" }
        - { name: "GI_STORAGE_DEVICE", value: "{{ storage_device }}" }
        - { name: "GI_STORAGE_DEVICE_SIZE", value: "{{ storage_device_size }}" }
        - { name: "GI_ICS", value: "{{ install_cpfs }}" }
      when: item.value == ""

    - name: Set parameters for ntp set on bastion
      ansible.builtin.set_fact:
        ntp_clients: "{{ lookup('env','GI_NTP_CLIENTS') }}"
      when: ntp_server == bas_ip

    - name: Check parameters for ntp set on bastion
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_NTP_CLIENTS", value: "{{ ntp_clients }}" }
      when: ntp_server == bas_ip and item.value == ""

    - name: Set worker nodes array
      ansible.builtin.set_fact:
        worker_ip: "{{ lookup('env', 'GI_WORKER_IP').split(',') }}"
        worker_mac: "{{ lookup('env', 'GI_WORKER_MAC_ADDRESS').split(',') }}"
        worker_name: "{{ lookup('env', 'GI_WORKER_NAME').split(',') }}"
      when: is_master_only == 'N'

    - name: Check workers configuration
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_WORKER_IP", value: "{{ worker_ip }}" }
        - { name: "GI_WORKER_MAC_ADDRESS", value: "{{ worker_mac }}" }
        - { name: "GI_WORKER_NAME", value: "{{ worker_name }}" }
      when: is_master_only == 'N' and item.value == ""

    - name: Set ODF tainted nodes array
      ansible.builtin.set_fact:
        ocs_ip: "{{ lookup('env', 'GI_OCS_IP').split(',') }}"
        ocs_mac: "{{ lookup('env', 'GI_OCS_MAC_ADDRESS').split(',') }}"
        ocs_name: "{{ lookup('env', 'GI_OCS_NAME').split(',') }}"
      when: is_ocs_tainted == 'Y'

    - name: Check OCS configuration
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_OCS_IP", value: "{{ ocs_ip }}" }
        - { name: "GI_OCS_MAC_ADDRESS", value: "{{ ocs_mac }}" }
        - { name: "GI_OCS_NAME", value: "{{ ocs_name }}" }
      when: is_ocs_tainted == 'Y' and item.value == ""

    - name: Set parameters for one subnet installation
      ansible.builtin.set_fact:
        dhcp_range_start: "{{ lookup('env','GI_DHCP_RANGE_START') }}"
        dhcp_range_stop: "{{ lookup('env','GI_DHCP_RANGE_STOP') }}"
        bas_gw: "{{ lookup('env','GI_GATEWAY') }}"
      when: one_subnet == 'Y'

    - name: Check configuration parameters for one subnet installation
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_DHCP_RANGE_START", value: "{{ dhcp_range_start }}" }
        - { name: "GI_DHCP_RANGE_STOP", value: "{{ dhcp_range_stop }}" }
        - { name: "GI_GATEWAY", value: "{{ bas_gw }}" }
      when: one_subnet == 'Y' and item.value == ""

    - name: Set OCP ingress cert variables
      ansible.builtin.set_fact:
        ocp_ca: "{{ lookup('env', 'GI_OCP_IN_CA') }}"
        ocp_cert: "{{ lookup('env', 'GI_OCP_IN_CERT') }}"
        ocp_key: "{{ lookup('env', 'GI_OCP_IN_KEY') }}"
      when: ocp_ext_ingress == 'Y'

    - name: Check OCP ingress cert variables
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_OCP_IN_CA", value: "{{ ocp_ca }}" }
        - { name: "GI_OCP_IN_CERT", value: "{{ ocp_cert }}" }
        - { name: "GI_OCP_IN_KEY", value: "{{ ocp_key }}" }
      when: ocp_ext_ingress == 'Y' and item.value == ""

    - name: Set rook-ceph variables
      ansible.builtin.set_fact:
        rook_dedicated_nodes: "{{ lookup('env', 'GI_ROOK_NODES').split(',') }}"
        rook_depl_type: "{{ lookup('env','GI_ROOK_DEPL') }}"
      when: storage_type == 'R'

    - name: Check rook-ceph variables
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_ROOK_NODES", value: "{{ rook_dedicated_nodes }}" }
        - { name: "GI_ROOK_DEPL", value: "{{ rook_depl_type }}" }
      when: storage_type == 'R' and item.value == ""

    - name: Set CPFS installation variables from env
      ansible.builtin.set_fact:
        cpfs_ext_ingress: "{{ lookup('env','GI_ICS_IN') }}"
        cpfs_version_hint: "{{ lookup('env','GI_ICS_VERSION') }}"
        cpfs_operands: "{{ lookup('env', 'GI_ICS_OPERANDS').split(',') }}"
        cpfs_dedicated_nodes: "{{ lookup('env', 'GI_ICS_NODES').split(',') }}"
        cpfs_admin_password: "{{ lookup('env','GI_ICSADMIN_PWD') }}"
      when: install_cpfs == 'Y'

    - name: Check CPFS variables
      ansible.builtin.fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_ICS_IN", value: "{{ cpfs_ext_ingress }}" }
        - { name: "GI_ICS_VERSION", value: "{{ cpfs_version_hint }}" }
        - { name: "GI_ICS_OPERANDS", value: "{{ cpfs_operands }}" }
        - { name: "GI_ICS_NODES", value: "{{ cpfs_dedicated_nodes }}" }
        - { name: "GI_ICSADMIN_PWD", value: "{{ cpfs_admin_password }}" }
      when: install_cpfs == 'Y' and item.value == ""

    - name: Clean downloads directory
      ansible.builtin.file:
        path: "{{ temp_dir }}/downloads" 
        state: absent
      when: clean_downloads == 'Y'

    - name: Setup bastion
      ansible.builtin.include_tasks: bastion_setup.yaml
      when: skip_phase|int < 1

    - ansible.builtin.debug:
        msg:
          - "Bastion prepared for OpenShift deployment"
          - "Start all nodes and confirm that they are correctly booted, then push <ENTER> to continue"
      when: skip_phase|int < 1

    - ansible.builtin.pause:
        echo: no
        prompt: "Press ENTER to continue"
      when: skip_phase|int < 1

    - name: Deploy OCP
      ansible.builtin.include_tasks: ocp_install.yaml
      when: skip_phase|int < 2

    - name: Install rook-ceph
      ansible.builtin.include_tasks: rook_install.yaml
      when: skip_phase|int < 3 and storage_type == 'R'

    - name: Setup image registry
      ansible.builtin.include_tasks: image_registry_setup.yaml
      when: skip_phase|int < 4

    - name: Deploy CPFS
      ansible.builtin.include_tasks: cpfs_install.yaml
      when: skip_phase|int < 5 and install_cpfs == 'Y'
