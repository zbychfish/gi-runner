- name: Create CPFS operator namespace
  ansible.builtin.shell:
    cmd: "oc create namespace {{ cpfs_operator_namespace }} || echo 'Namespace exists'"

- name: Check presence of cloudctl tool
  ansible.builtin.stat:
    path: "{{ temp_dir }}/downloads/{{ item.file }}"
  register: cloudctl_tool
  with_items:
    - { file: "cloudctl-linux-amd64.tar.gz" }
  ignore_errors: true

- name: "Download cloud tool"
  ansible.builtin.get_url:
    url: "https://github.com/IBM/cloud-pak-cli/releases/latest/download/cloudctl-linux-amd64.tar.gz"
    dest: "{{ temp_dir }}/downloads"
    use_proxy: "{{ 'yes' if internet_type == 'P' else 'no' }}"
  when: internet_type != 'A'

- name: Unpack cloudctl tools
  ansible.builtin.shell:
    cmd: "tar xf {{ temp_dir }}/downloads/{{ item.src }} -C /usr/local/bin"
  with_items:
    - { src: "cloudctl-linux-amd64.tar.gz" }

- name: Standarize cloudctl name
  ansible.builtin.command: mv /usr/local/bin/cloudctl-linux-amd64 /usr/local/bin/cloudctl

- name: Set correct rights for RHCOS tools in /usr/local/bin
  ansible.builtin.file:
    path: "/usr/local/bin/{{ item.file }}"
    owner: root
    group: root
    mode: 0755
  with_items:
    - { file: "cloudctl" }

- name: Create CPFS catalog file
  ansible.builtin.template:
    src: cpfs_catalog.j2
    dest: "{{ temp_dir }}/yamls/cpfs_catalog.yaml"
  when: internet_type != 'A'

- name: Publish CPFS catalog
  ansible.builtin.shell:
    cmd: "oc apply -f {{ temp_dir }}/yamls/cpfs_catalog.yaml"
  when: internet_type != 'A'

- name: Wait for CPFS catalog
  ansible.builtin.shell:
    cmd: "oc get pods -n openshift-marketplace|grep opencloud-operators|grep 1/1|grep Running|wc -l"
  register: cpfs_catalog_status
  until: "cpfs_catalog_status.stdout == \"1\""
  retries: 30
  delay: 10

- name: Wait for CPFS catalog source
  ansible.builtin.shell:
    cmd: "oc get catalogsource -n openshift-marketplace|grep opencloud-operators|wc -l"
  register: cpfs_catalog_source_status
  until: "cpfs_catalog_source_status.stdout == \"1\""
  retries: 30
  delay: 10

- name: Create CPFS operator subscription file
  ansible.builtin.template:
    src: cpfs_subscription.j2
    dest: "{{ temp_dir }}/yamls/cpfs_subscription.yaml"

- name: Subscribe ICS operator
  ansible.builtin.shell:
    cmd: "oc apply -f {{ temp_dir }}/yamls/cpfs_subscription.yaml"

- name: Wait for ICS csv
  ansible.builtin.shell:
    cmd: "oc -n common-service get csv|grep ibm-common-service-operator|grep Succeeded|wc -l"
  register: ics_csv_status
  until: "ics_csv_status.stdout == \"1\""
  retries: 30
  delay: 10

- name: Wait for ICS crd's
  ansible.builtin.shell:
    cmd: "oc get crd | grep operandrequest|wc -l"
  register: ics_crd_status
  until: "ics_crd_status.stdout == \"1\""
  retries: 30
  delay: 10

- name: Set ICS deployment size
  ansible.builtin.shell:
    cmd: "oc patch commonservice common-service -n ibm-common-services --type=\"json\" -p='[{\"op\": \"replace\", \"path\": \"/spec/size\", \"value\": \"{{ ics_size }}\"}]'"
  when: ics_size != 'T'

- name: Wait for deployment size change
  ansible.builtin.shell:
    cmd: "oc get commonservice common-service -n ibm-common-services -o json|jq -r .status.phase"
  register: ics_commonservice_status
  until: "ics_commonservice_status.stdout == \"Succeeded\""
  retries: 30
  delay: 10
