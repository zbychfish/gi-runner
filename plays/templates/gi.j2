apiVersion: gi.ds.isc.ibm.com/v1
kind: GuardiumInsights
metadata:
  name: {{ gi_namespace }}
spec:
{% if gi_ssh_host != '0.0.0.0' or gi_ssh_port|int != 0 %}
  ibm-insights-sequencer:
{% endif %}
{% if gi_ssh_host != '0.0.0.0' %}
    GUARDIUM_AGENT_SCP_TARGET_HOST: {{ gi_ssh_host }}
{% endif %}
{% if gi_ssh_port|int != 0 %}
    GUARDIUM_AGENT_SCP_TARGET_PORT: {{ gi_ssh_port }}
{% endif %}
  version: {{ gi_version }}
  license:
    accept: true
    licenseType: "{{ gi_license }}"
  guardiumInsightsGlobal:
    deploySettings:
      ensureDb2InstallPlacement: true
    dev: "false"
    licenseAccept: true
    size: {{ gi_deployment_size }}
    insights:
      ingress:
        hostName: insights.apps.{{ ocp_domain }}
        domainName: apps.{{ ocp_domain }}
      ics:
        namespace: ibm-common-services
        registry: common-service
    storageClassName: "{{ db2_sc_fs }}"
    backupsupport:
{% if gi_nfs_backup == 'Y' %}
      enabled: "true"
      name: "backup-nfs-pvc"  
      size: {{ gi_backup_volume_size }}Gi
      storageClassName: nfs-client
{% else %}
      enabled: "false"
{% endif %}
  dependency-kafka:
    kafka:
      storage:
        class: "{{ nodb2_sc_block }}"
{% if gi_kafka_size|int != 0 %}
        size: {{ gi_kafka_size }}Gi
{% endif %}
    zookeeper:
      storage:
        class: "{{ nodb2_sc_block }}"
{% if gi_zookeeper_size|int != 0 %}
        size: {{ gi_zookeeper_size }}Gi
{% endif %}
  dependency-postgres:
    postgres:
      storage:
        size: {{ gi_pgsql_size }}Gi
        storageClassName: "{{ nodb2_sc_block }}"
  dependency-redis:
    size: 3
    persistence:
      enabled: true
      size: {{ gi_redis_size }}Gi
      storageClass: "{{ nodb2_sc_block }}"
  dependency-mongodb:
    storage:
    - metadata:
        name: data-volume
      spec:
        accessModes:
        - ReadWriteOnce
{% if gi_mongo_size|int != 0 %}
        resources:
          requests:
            storage: {{ gi_mongo_size }}Gi
{% endif %}
        storageClassName: "{{ nodb2_sc_block }}"
    - metadata:
        name: logs-volume
      spec:
        accessModes:
        - ReadWriteMany
{% if gi_mongo_meta_size|int != 0 %}
        resources:
          requests:
            storage: {{ gi_mongo_meta_size }}Gi
{% endif %}
        storageClassName: "{{ nodb2_sc_fs }}"
  dependency-db2:
    db2instance:
      installAsDefault: true
      dbConfig:
        LOGARCHMETH1: "DISK:/mnt/logs/archive"
      nodes: {{ db2_nodes_array|length }}
      resources:
        requests:
          cpu: "6"
          memory: "48Gi"
        limits:
          cpu: "6"
          memory: "48Gi"
      dbSettings:
{% if db2_enc %}
        encrypt: "YES"
{% else %}
        encrypt: "NO"
{% endif %}
      storage:
{% if gi_logs_size|int != 0 %}
      - name: archivelogs
        type: create
        spec:
          storageClassName: "{{ db2_sc_fs }}"
          accessModes:
          - ReadWriteMany
          resources:
            requests:
              storage: {{ gi_logs_size }}Gi
{% endif %}
      - name: meta
        type: create
        spec:
          storageClassName: "{{ db2_sc_fs }}"
          accessModes:
          - ReadWriteMany
{% if gi_meta_size|int != 0 %}
          resources:
            requests:
              storage: {{ gi_meta_size }}Gi
{% endif %}
      - name: data
        type: template
        spec:
          storageClassName: "{{ db2_sc_block }}"
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: {{ gi_ds_size }}Gi
      - name: tempts
        type: template
        spec:
          storageClassName: "{{ db2_sc_block }}"
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: {{ gi_ds_size|int // 10 }}Gi
      partitionConfig:
        total: {{ db2_nodes_array|length * db2_partition_per_node|int }}
      instance:
        registry:
          DB2_4K_DEVICE_SUPPORT: "ON"
  mini-snif:
    persistentVolumesClaims:
      mini-snif-shared:
        storageClassName: "{{ db2_sc_fs }}"
  universal-connector-manager:
    persistentVolumesClaims:
      universal-connector-manager-shared:
        storageClassName: "{{ db2_sc_fs }}"
  settings-datasources:
    persistentVolumesClaims:
      settings-datasources:
        storageClassName: "{{ db2_sc_fs }}"
  ticketing:
    persistentVolumesClaims:
      ticketing-keystore:
        storageClassName: "{{ db2_sc_fs }}"
