- name: Waiting for OCP cluster deployment (it takes 15-40 minutes)
  ansible.builtin.command: openshift-install --dir=../ocp wait-for bootstrap-complete

- name: Check bootstrap availability
  ansible.builtin.command:
    cmd: "ping -c 1 {{ boot_name }}.{{ ocp_domain }}"
  register: boot_availability
  ignore_errors: yes

- name: Stop bootstrap
  ansible.builtin.shell:
    cmd: "ssh -l core {{ boot_name }}.{{ ocp_domain }} -i {{ ssh_key }} sudo shutdown -h +1"
  remote_user: core
  when: boot_availability.rc != 2 and boot_availability.rc != 1

- name: Wait for boostrap shutdown
  ansible.builtin.pause:
    minutes: 1
  when: boot_availability.rc != 2 and boot_availability.rc != 1

- name: Remove DNS records
  ansible.builtin.lineinfile:
    path: /etc/dnsmasq.conf
    regexp: "{{ item.regexp }}"
    state: absent
  with_items:
    - { regexp: "^address=/matchbox." }
    - { regexp: "^address=/boot." }
    - { regexp: "^#TFTP" }
    - { regexp: "^tftp-" }
    - { regexp: "^enable-tftp" }
    - { regexp: "^dhcp-match" }
    - { regexp: "^dhcp-boot" }
    - { regexp: "^dhcp-userclass" }

- name: Restart dnsmasq
  ansible.builtin.service:
    name: dnsmasq
    state: restarted
    enabled: yes

- name: Stop unused services
  ansible.builtin.service:
    name: "{{ item.name }}"
    state: stopped
    enabled: no
  with_items:
    - { name: "matchbox" }

- name: Reconfigure HA Proxy
  ansible.builtin.lineinfile:
    path: /etc/haproxy/haproxy.cfg
    regexp: "{{ item.regexp }}"
    state: absent
  with_items:
    - { regexp: '^ server m0' }

- name: Restart HA Proxy
  ansible.builtin.service:
    name: haproxy
    state: restarted
    enabled: yes

- name: Copy HA Proxy config file
  ansible.builtin.copy:
    src: /etc/haproxy/haproxy.cfg
    dest: /etc/haproxy/haproxy.cfg.main

- name: Check cluster nodes health and approve CSR's if needed
  ansible.builtin.shell: ../scripts/check_cluster_health.sh
  vars:
    node_number: "{{ master_ip|length+worker_ip|default([])|length+ocs_ip|default([])|length }}"
  register: cluster_health
  until: node_number == cluster_health.stdout
  retries: 150
  delay: 10

- name: Wait for cluster operators
  ansible.builtin.shell:
    cmd: "oc get co --no-headers|awk '{ print $3$4$5 }'|grep -v TrueFalseFalse|wc -l"
  register: co_status
  until: "co_status.stdout == \"0\""
  retries: 150
  delay: 10

- name: Is htpasswd secret available
  ansible.builtin.shell:
    cmd: "oc get secret htpass-secret -n openshift-config -oname|wc -l"
  register: is_htpasswd_secret

- name: Create htpasswd file
  community.general.htpasswd:
    path: "{{ temp_dir }}/files/ocpadmin.htpasswd"
    name: "{{ ocpadmin }}"
    password: "{{ ocpadmin_password }}"
  when: is_htpasswd_secret.stdout|int == 0

- name: Register htpasswd secret for OCP admin
  ansible.builtin.shell:
    cmd: "{{ item.cmd }}"
  with_items:
    - { cmd: "oc create secret generic htpass-secret --from-file=htpasswd=../gi-temp/files/ocpadmin.htpasswd -n openshift-config" }
  when: is_htpasswd_secret.stdout|int == 0

- name: Register htpasswd oauth provider
  ansible.builtin.shell:
    cmd: "{{ item.cmd }}"
  with_items:
    - { cmd: "oc apply -f ../funcs/yamls/oauth_provider.yaml" }
    - { cmd: "oc adm policy add-cluster-role-to-user cluster-admin {{ ocpadmin }}" }

- name: Wait to initiate changes related to added admin
  ansible.builtin.pause:
    minutes: 5
  when: is_htpasswd_secret.stdout|int == 0

- name: Add CM with new CA cert
  ansible.builtin.shell:
    cmd: "oc create configmap gn-ca --from-file=ca-bundle.crt={{ ocp_ca }} -n openshift-config"
  when: ocp_ext_ingress == 'Y'

- name: Add CA cert to OCP proxy configuration
  ansible.builtin.shell:
    cmd: "oc patch proxy/cluster --type=merge -p '{\"spec\":{\"trustedCA\":{\"name\":\"gn-ca\"}}}'"
  when: ocp_ext_ingress == 'Y'

- name: Wait for cluster stabilization - CA cert added
  ansible.builtin.pause:
    minutes: 5
  when: ocp_ext_ingress == 'Y'

- name: Check cluster nodes health after proxy certificate change
  ansible.builtin.shell: ../funcs/scripts/check_cluster_health_operators.sh
  register: cluster_health_operators
  until: cluster_health_operators.stdout == "0"
  retries: 150
  delay: 10
  when: ocp_ext_ingress == 'Y'

- name: Add secret with new cert
  ansible.builtin.shell:
    cmd: "oc create secret tls gncert --cert={{ ocp_cert }} --key={{ ocp_key }} -n openshift-ingress"
  when: ocp_ext_ingress == 'Y'

- name: Modify certificate for ingress
  ansible.builtin.shell:
    cmd: "oc patch ingresscontroller.operator default --type=merge -p '{\"spec\":{\"defaultCertificate\": {\"name\": \"gncert\"}}}' -n openshift-ingress-operator"
  when: ocp_ext_ingress == 'Y'

- name: Wait for cluster stabilization - cluster cert changed
  ansible.builtin.pause:
    minutes: 1
  when: ocp_ext_ingress == 'Y'

- name: Check cluster nodes health after ingress change
  ansible.builtin.shell: ../funcs/scripts/check_cluster_health_operators.sh
  register: cluster_health_operators
  until: cluster_health_operators.stdout == "0"
  retries: 150
  delay: 10
  when: ocp_ext_ingress == 'Y'

