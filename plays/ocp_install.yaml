- name: Waiting for OCP cluster deployment (it takes 15-40 minutes)
  ansible.builtin.command: openshift-install --dir=../ocp wait-for bootstrap-complete

- name: Check bootstrap availability
  ansible.builtin.command:
    cmd: "ping -c 1 {{ boot_name }}.{{ ocp_domain }}"
  register: boot_availability
  ignore_errors: yes

- name: Stop bootstrap
  ansible.builtin.shell:
    cmd: "ssh -l core {{ boot_name }}.{{ ocp_domain }} -i {{ ssh_key }} sudo shutdown -h +1"
  remote_user: core
  when: boot_availability.rc != 2 and boot_availability.rc != 1

- name: Wait for boostrap shutdown
  ansible.builtin.pause:
    minutes: 1
  when: boot_availability.rc != 2 and boot_availability.rc != 1

- name: Remove DNS records
  ansible.builtin.lineinfile:
    path: /etc/dnsmasq.conf
    regexp: "{{ item.regexp }}"
    state: absent
  with_items:
    - { regexp: "^address=/matchbox." }
    - { regexp: "^address=/boot." }
    - { regexp: "^#TFTP" }
    - { regexp: "^tftp-" }
    - { regexp: "^enable-tftp" }
    - { regexp: "^dhcp-match" }
    - { regexp: "^dhcp-boot" }
    - { regexp: "^dhcp-userclass" }

- name: Restart dnsmasq
  ansible.builtin.service:
    name: dnsmasq
    state: restarted
    enabled: yes

- name: Stop unused services
  ansible.builtin.service:
    name: "{{ item.name }}"
    state: stopped
    enabled: no
  with_items:
    - { name: "matchbox" }

- name: Reconfigure HA Proxy
  ansible.builtin.lineinfile:
    path: /etc/haproxy/haproxy.cfg
    regexp: "{{ item.regexp }}"
    state: absent
  with_items:
    - { regexp: '^ server m0' }

- name: Restart HA Proxy
  ansible.builtin.service:
    name: haproxy
    state: restarted
    enabled: yes

- name: Copy HA Proxy config file
  ansible.builtin.copy:
    src: /etc/haproxy/haproxy.cfg
    dest: /etc/haproxy/haproxy.cfg.main

- name: Check cluster nodes health and approve CSR's if needed
  ansible.builtin.shell: ../scripts/check_cluster_health.sh
  vars:
    node_number: "{{ master_ip|length+worker_ip|default([])|length+ocs_ip|default([])|length }}"
  register: cluster_health
  until: node_number == cluster_health.stdout
  retries: 150
  delay: 10

- name: Wait for cluster operators
  ansible.builtin.shell:
    cmd: "oc get co --no-headers|awk '{ print $3$4$5 }'|grep -v TrueFalseFalse|wc -l"
  register: co_status
  until: "co_status.stdout == \"0\""
  retries: 150
  delay: 10

